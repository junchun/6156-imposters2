package controllers;

import io.javalin.Javalin;
import java.io.IOException;
import java.util.Queue;
import models.GameBoard;
import models.Message;
import models.Move;
import org.eclipse.jetty.websocket.api.Session;

class PlayGame {

  private static final int PORT_NUMBER = 8080;
  private static GameBoard gameBoard;
  private static Message message;
  private static Move move;

  private static Javalin app;

  /** Main method of the application.
   * @param args Command line arguments
   */
  public static void main(final String[] args) {
    move = new Move();
    message = new Message();

    app = Javalin.create(config -> {
      config.addStaticFiles("/public");
    }).start(PORT_NUMBER);

    // Test Echo Server
    app.post("/echo", ctx -> {
      ctx.result(ctx.body());
    });
    
    // Hector's code 
    
    // player 1 join the game 
    app.get("/newgame", ctx -> {
      ctx.redirect("tictactoe.html");
    });
    
    // player 1 starts the game
    app.post("/startgame", ctx -> {
      
      //set user info 
      String clientType = ctx.formParam("type");
      char p1Type = clientType.charAt(0);

      // start game 
      gameBoard = new GameBoard();
      gameBoard.setPlayer1(1, p1Type);
      
      // responds 
      ctx.status(200);
      ctx.result(gameBoard.boardJson());
   
    });
    
    // player 2 join the game 
    app.get("/joingame", ctx -> {
      //player info 
      char p2Type = gameBoard.getPlayer1().getType() == 'X' ? 'O' : 'X';
      gameBoard.setPlayer2(2, p2Type);
      
      //start game 
      gameBoard.setGame(true);      
      
      // server 
      sendGameBoardToAllPlayers(gameBoard.boardJson());   
      
      // respond 
      ctx.redirect("/tictactoe.html?p=2");
    });
    
    app.post("/move/:playerId", ctx -> {
      // set move 
      int playerId = Integer.parseInt(ctx.pathParam("playerId"));
      int moveX = Integer.parseInt(ctx.formParam("x"));
      int moveY = Integer.parseInt(ctx.formParam("y")); 
      
      // initialize move 
      move.setMove(gameBoard, playerId, moveX, moveY);

      // load player's Move
      gameBoard.playerMoves(move, message);
    
      // responds 
      ctx.result(message.messageJson());
      sendGameBoardToAllPlayers(gameBoard.boardJson());   
    });

    // Web sockets - DO NOT DELETE or CHANGE
    app.ws("/gameboard", new UiWebSocket());
  }

  /** Send message to all players.
   * @param gameBoardJson Gameboard JSON
   * @throws IOException Websocket message send IO Exception
   */
  private static void sendGameBoardToAllPlayers(final String gameBoardJson) {
    Queue<Session> sessions = UiWebSocket.getSessions();
    for (Session sessionPlayer : sessions) {
      try {
        sessionPlayer.getRemote().sendString(gameBoardJson);
      } catch (IOException e) {
        // Add logger here
        System.out.println("send error");
      }
    }
  }

  public static void stop() {
    app.stop();
  }
}

package controllers;

import io.javalin.websocket.WsCloseContext;
import io.javalin.websocket.WsCloseHandler;
import io.javalin.websocket.WsConnectContext;
import io.javalin.websocket.WsConnectHandler;
import io.javalin.websocket.WsHandler;
import java.util.Queue;
import java.util.concurrent.ConcurrentLinkedQueue;
import java.util.function.Consumer;
import org.eclipse.jetty.websocket.api.Session;

/** Web socket class: DO NOT MODIFY.
 * @author Shirish Singh
 *
 */
public class UiWebSocket implements Consumer<WsHandler>  {

  // Store sessions to broadcast a message to all users
  private static final Queue<Session> SESSIONS = new ConcurrentLinkedQueue<>();

  @Override
  public void accept(final WsHandler t) {

    // On Connect
    t.onConnect(new WsConnectHandler() {

      @Override
      public void handleConnect(final WsConnectContext ctx) throws Exception {
        // TODO Auto-generated method stub
        SESSIONS.add(ctx.session);
      }

    });

    // On Close
    t.onClose(new WsCloseHandler() {

      @Override
      public void handleClose(final WsCloseContext ctx) throws Exception {
        SESSIONS.remove(ctx.session);
      }
    });
  }

  public static Queue<Session> getSessions() {
    return SESSIONS;
  }

}
package models;

import com.google.gson.Gson;



public class GameBoard {

  private Player p1;

  private Player p2;

  private boolean gameStarted;

  private int turn;

  private char[][] boardState;

  private int winner;

  private boolean isDraw;
  
  private int totalPlays;
  
  /**
   * Construction for Game board.
  */
  public GameBoard() {
    gameStarted = false;
    turn = 1;
    winner = 0;
    isDraw = false;

    char[][] initBS = { {0, 0, 0}, {0, 0, 0}, {0, 0, 0} }; 
    setBoardState(initBS);

  }
  
  
  public Player getPlayer1() { 
    return this.p1;
  }
  
  public Player getPlayer2() { 
    return this.p2;
  }
  
  public void setPlayer1(int id, char type) {
    this.p1 = new Player(id, type);
  }
  
  public void setPlayer2(int id, char type) {
    this.p2 = new Player(id, type);
  }
  
  public void setGame(boolean state) {
    gameStarted = state;
  }
  
  public char[][] getBoardState() { 
    return this.boardState;
  }
  
  
  public void setBoardState(char[][] boardState) {
    this.boardState = boardState;
  }
  
  /**
  * check player's move validity  
  */
  public boolean isMoveValid(Move move) {
    boolean isValid = false;
    if (this.boardState[move.getMoveX()][move.getMoveY()] == 0 
        && this.turn == move.getPlayer().getId()
        && totalPlays <= 9) {
      isValid = true;
    }
    return isValid;
  }
  
  /**
  * Set message for wrong move, depending on the state 
  */
  public void setMessage(Message message, Move move) {
  
    message.setMessage(false, 400, "bad request");
  
    // not the player turn 
    if (move.getPlayer().getId() != this.turn) {
      message.setMessage(false, 400, "It is not your turn, please wait!");
    } else {
      if (this.boardState[move.getMoveX()][move.getMoveY()] != 0) {
        message.setMessage(false, 400, "Cell is taken :(");
      }
    }
    
    // check if the game is a draw 
    if (this.totalPlays >= 9) {
      this.isDraw = true;
      message.setMessage(false, 400, "game is a draw");
    }  
    
  }
  
  /**
  * Player's move.
  */
  public void playerMoves(Move move, Message message) {
  
    // change the state of the board if the move is valid 
    if (this.turn == move.getPlayer().getId() && isMoveValid(move)) {
      this.turn = move.getPlayer().getId() == 1 ? 2 : 1;
      message.setMessage(true, 100, "");
      this.boardState[move.getMoveX()][move.getMoveY()] = move.getPlayer().getType();
      this.totalPlays++;
    
      if (isPlayerAWinner(move.getPlayer().getType(), move.getMoveX(), move.getMoveY())) {
        this.winner = move.getPlayer().getId();
        message.setMessage(true, 100, "Player" + move.getPlayer().getId() + "won :)");
      }
    } else {
      // the move is not valid 
      this.setMessage(message, move);
    }
    
    // the game is a draw 
    if (this.totalPlays > 9) {
      this.isDraw = true;
      message.setMessage(false, 400, "game is a draw");
    } 
    
  }
  
  
  // check if player won 
  private boolean isPlayerAWinner(char type, int x, int y) {
  
    boolean isWinner = false;
    // check column 
    for (int i = 0; i <= 2; i++) {
      if (boardState[0][i] == type
          && boardState[1][i] == type
          && boardState[2][i] == type
          && this.isDraw != true) {
        isWinner = true;
        break;   
      }
    }
  
    // check row
    for (int i = 0; i <= 2; i++) {
      if (boardState[i][0] == type
          && boardState[i][1] == type
          && boardState[i][2] == type
          && this.isDraw != true) {
        isWinner = true;
        break;   
      }
    }
  
    //check diagonal    
    if (boardState[0][0] == type
        && boardState[1][1] == type
        && boardState[2][2] == type
        && this.isDraw != true) {
      isWinner = true;
    }
    
    if (boardState[2][0] == type
        && boardState[1][1] == type
        && boardState[0][2] == type
        && this.isDraw != true) {
      isWinner = true;
    }
      
    return isWinner;
  
  }
  
  // return the object JSON
  public String boardJson() {
    Gson gson = new Gson(); 
    return gson.toJson(this);
  } 

}
package models;

public class Move {

  private Player player;

  private int moveX;

  private int moveY;
  
  public Move() { 
  
  }
  
  /**
  * set player's move.
  */
  public void setMove(GameBoard gameBoard, int playerId, int x, int y) { 
  
    if (playerId == 1) {
      this.player = gameBoard.getPlayer1();
    } else {
      this.player = gameBoard.getPlayer2();
    }
    
    this.moveX = x;
    this.moveY = y;
  }
  
  public int getMoveX() {
    return this.moveX;
  }

  public int getMoveY() {
    return this.moveY;
  }
  
  public Player getPlayer() {
    return this.player;
  }
}
package models;

import com.google.gson.Gson;


public class Message {

  private boolean moveValidity;

  private int code;

  private String message;
  
  /**
  * Message.
  */
  public Message() {
    moveValidity = true;
    code = 100;
    message = "";
  }
  
  /**
  * Construction for Game board, and a setter.
  */
  public void setMessage(boolean mv, int code, String message) {
    this.moveValidity = mv;
    this.code = code;
    this.message = message;
  }
  
  // return the message in json 
  public String messageJson() {
    Gson gson = new Gson(); 
    return gson.toJson(this);
  } 

}
package models;

public class Player {

  private char type;

  private int id;
  
  public Player() {
    this.id = 0;
    this.type = '0';
  }
  
  // initialize player 
  public Player(int id, char type) {
    this.id = id;
    this.type = type;
  }
  
  public char getType() {
    return this.type;
  }
  
  public int getId() { 
    return this.id;
  }
  

}
