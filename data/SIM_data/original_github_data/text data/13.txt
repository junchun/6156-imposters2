package controllers;

import com.google.gson.Gson;
import io.javalin.Javalin;
import java.io.IOException;
import java.util.Queue;
import models.GameBoard;
import models.Message;
import models.Move;
import models.Player;
import org.eclipse.jetty.websocket.api.Session;

class PlayGame {

  private static final int PORT_NUMBER = 8080;

  private static Javalin app;

  /**
   * Main method of the application.
   * 
   * @param args Command line arguments
   */
  public static void main(final String[] args) {

    app = Javalin.create(config -> {
      config.addStaticFiles("/public"); // Enable static files
    }).start(PORT_NUMBER);

    // Test Echo Server
    app.post("/echo", ctx -> {
      ctx.result(ctx.body());
    });

    GameBoard gameBoard = new GameBoard();

    /*
     * New Game This EndPoint will return a new page for Player 1. Redirect the user to
     * tiatactoe.html page.
     */
    app.get("/newgame", ctx -> {
      ctx.redirect("/tictactoe.html");
    });

    /*
     * Start Game This EndPoint will initialize the game board and setup Player 1. The first player
     * will always start the game.
     */
    app.post("/startgame", ctx -> {
      Player p1 = new Player();
      p1.setId(1);
      p1.setType(ctx.formParam("type").charAt(0));
      gameBoard.setP1(p1);
      gameBoard.initializeBoardState();
      Gson gson = new Gson();
      String gameBoardJson = gson.toJson(gameBoard);
      ctx.result(gameBoardJson); // Return game board in JSON
    });

    /*
     * Join Game This End Point will Initialize Player 2 and add the player to existing game board.
     * After Player 2 has joined, the game must start, and all players' UI must be updated with the
     * latest game board state.
     */
    app.get("/joingame", ctx -> {
      Player p2 = new Player();
      p2.setId(2);
      if (gameBoard.getP1().getType() == 'X') {
        p2.setType('O');
      } else {
        p2.setType('X');
      }
      gameBoard.setP2(p2);
      gameBoard.setGameStarted(true);
      Gson gson = new Gson();
      String gameBoardJson = gson.toJson(gameBoard);
      sendGameBoardToAllPlayers(gameBoardJson); // Return game board in
      // JSON
      ctx.redirect("/tictactoe.html?p=2");
    });

    /*
     * Move Update the game board if the move is valid. Otherwise it returns an error message.
     */
    app.post("/move/:playerId", ctx -> {
      // Get id of the player making a move
      Move move = new Move();
      move.setMoveX(Integer.parseInt(ctx.formParam("x"))); // Board row
      // number
      move.setMoveY(Integer.parseInt(ctx.formParam("y"))); // Board column
      // number
      int playerId = Integer.parseInt(ctx.pathParam("playerId"));
      move.setPlayer(gameBoard.getPlayer(playerId));
      Message message = new Message();
      if (gameBoard.checkMoveValidity(move, message) && gameBoard.makeMove(move)) {
        gameBoard.setTurn(gameBoard.getTurn() % 2 + 1);
      }
      Gson messageGson = new Gson();
      String messageJson = messageGson.toJson(message);
      ctx.result(messageJson);
      Gson gameBoardGson = new Gson();
      String gameBoardJson = gameBoardGson.toJson(gameBoard);
      sendGameBoardToAllPlayers(gameBoardJson);
    });

    // Web sockets - DO NOT DELETE or CHANGE
    app.ws("/gameboard", new UiWebSocket());
  }

  /**
   * Send message to all players.
   * 
   * @param gameBoardJson Gameboard JSON
   * @throws IOException Websocket message send IO Exception
   */
  private static void sendGameBoardToAllPlayers(final String gameBoardJson) {
    Queue<Session> sessions = UiWebSocket.getSessions();
    for (Session sessionPlayer : sessions) {
      try {
        sessionPlayer.getRemote().sendString(gameBoardJson);
      } catch (IOException e) {
        // Add logger here
      }
    }
  }

  public static void stop() {
    app.stop();
  }
}
package controllers;

import io.javalin.websocket.WsCloseContext;
import io.javalin.websocket.WsCloseHandler;
import io.javalin.websocket.WsConnectContext;
import io.javalin.websocket.WsConnectHandler;
import io.javalin.websocket.WsHandler;
import java.util.Queue;
import java.util.concurrent.ConcurrentLinkedQueue;
import java.util.function.Consumer;
import org.eclipse.jetty.websocket.api.Session;

/** Web socket class: DO NOT MODIFY.
 * @author Shirish Singh
 *
 */
public class UiWebSocket implements Consumer<WsHandler>  {

  // Store sessions to broadcast a message to all users
  private static final Queue<Session> SESSIONS = new ConcurrentLinkedQueue<>();

  @Override
  public void accept(final WsHandler t) {

    // On Connect
    t.onConnect(new WsConnectHandler() {

      @Override
      public void handleConnect(final WsConnectContext ctx) throws Exception {
        // TODO Auto-generated method stub
        SESSIONS.add(ctx.session);
      }

    });

    // On Close
    t.onClose(new WsCloseHandler() {

      @Override
      public void handleClose(final WsCloseContext ctx) throws Exception {
        SESSIONS.remove(ctx.session);
      }
    });
  }

  public static Queue<Session> getSessions() {
    return SESSIONS;
  }

}
package models;

/**
 * This is the method to update board states and conclude the outcome for 
 * the current game.
 * @author Jiaqi Liu
 * @since 2020-9-25
 */
public class GameBoard {

  private Player p1;

  private Player p2;

  private boolean gameStarted;

  private int turn;

  private char[][] boardState;

  private int winner;

  private boolean isDraw;

  /**
   * This is the constructor for GameBoard. 
   */
  public GameBoard() {
    this.turn = 1;
    this.gameStarted = false;
    this.isDraw = false;
  }

  public void setP1(Player p1) {
    this.p1 = p1;
  }

  public void setP2(Player p2) {
    this.p2 = p2;
  }

  public void setGameStarted(boolean gameStarted) {
    this.gameStarted = gameStarted;
  }

  public void setTurn(int turn) {
    this.turn = turn;
  }

  public void setBoardState(char[][] boardState) {
    this.boardState = boardState;
  }

  public void setWinner(int winner) {
    this.winner = winner;
  }

  public void setIsDraw(boolean isDraw) {
    this.isDraw = isDraw;
  }

  public Player getP1() {
    return p1;
  }

  public Player getP2() {
    return p2;
  }

  /**
   * This is the method to get Player by id.
   * @param id This is the id of the Player to get.
   * @return Player This is the Player got by id.
   */
  public Player getPlayer(int id) {
    if (p1.getId() == id) {
      return p1;
    } else {
      return p2;
    }
  }

  public boolean getGameStarted() {
    return gameStarted;
  }

  public int getTurn() {
    return turn;
  }

  public char[][] getBoardState() {
    return boardState;
  }

  public int getWinner() {
    return winner;
  }

  public boolean getIsDraw() {
    return isDraw;
  }

  /** 
   * This is the method to initialize/reset the game board and all states.
   */
  public void initializeBoardState() {
    boardState = new char[3][3];
    this.turn = 1;
    this.winner = 0;
    this.isDraw = false;
    this.gameStarted = false;
  }

  /**
   * This is the method to check the validity of current move.
   * @param move This is the move the current player attempts.
   * @param message This is the error message returned if the move is invalid.
   * @return boolean  This returns the validity of current move.
   */
  public boolean checkMoveValidity(Move move, Message message) {
    int currPlayerId = move.getPlayer().getId();
    int x = move.getMoveX();
    int y = move.getMoveY();
    String code = String.valueOf(currPlayerId) + String.valueOf(x) + String.valueOf(y);
    message.setCode(Integer.parseInt(code));

    message.setMoveValidity(false);
    if (currPlayerId != turn) {
      message.setMessage("It's not your turn to move. Please wait for another player to move.");
      return false;
    } else {
      if (boardState[x][y] == 'X' || boardState[x][y] == 'O') {
        message.setMessage(
            "The position you select to move is invalid. Please try an unoccupied position.");
        return false;
      } else {
        message.setMoveValidity(true);
        return true;
      }
    }
  }

  /**
   * This is the method to make a move and check whether the game ends after the move.
   * @param move This is the move the  the player attempts.
   * @return boolean This returns false if the game ends after the move and true
   *                 otherwise.
   */
  public boolean makeMove(Move move) {
    int x = move.getMoveX();
    int y = move.getMoveY();
    boardState[x][y] = move.getPlayer().getType(); // Make a Move

    // Check whether the game ends after move
    int occupiedCellsCount = 0;
    for (int i = 0; i < 3; i++) {
      for (int j = 0; j < 3; j++) {
        if (boardState[i][j] == 'X' || boardState[i][j] == 'O') {
          occupiedCellsCount++;
        }
      }
    }
    if (occupiedCellsCount == 9) {
      this.isDraw = true;
      return false;
    }

    if (boardState[x][0] == boardState[x][1] && boardState[x][1] == boardState[x][2]) {
      this.winner = move.getPlayer().getId();
      return false;
    }
    if (boardState[0][y] == boardState[1][y] && boardState[1][y] == boardState[2][y]) {
      this.winner = move.getPlayer().getId();
      return false;
    }
    if ((boardState[1][1] == move.getPlayer().getType())
        && (boardState[0][0] == boardState[1][1] && boardState[1][1] == boardState[2][2])) {
      this.winner = move.getPlayer().getId();
      return false;
    }
    if ((boardState[1][1] == move.getPlayer().getType())
        && (boardState[0][2] == boardState[1][1] && boardState[1][1] == boardState[2][0])) {
      this.winner = move.getPlayer().getId();
      return false;
    }
    return true;
  }

}
package models;

public class Message {

  private boolean moveValidity;

  private int code;

  private String message;

  public void setMoveValidity(boolean moveValidity) {
    this.moveValidity = moveValidity;
  }

  public void setCode(int code) {
    this.code = code;
  }

  public void setMessage(String message) {
    this.message = message;
  }

  public boolean getMoveValidity() {
    return moveValidity;
  }

  public int getCode() {
    return code;
  }

  public String getMessage() {
    return message;
  }

}
package models;

public class Move {

  private Player player;

  private int moveX;

  private int moveY;

  public void setPlayer(Player player) {
    this.player = player;
  }

  public void setMoveX(int moveX) {
    this.moveX = moveX;
  }

  public void setMoveY(int moveY) {
    this.moveY = moveY;
  }

  public Player getPlayer() {
    return player;
  }

  public int getMoveX() {
    return moveX;
  }

  public int getMoveY() {
    return moveY;
  }

}
package models;

public class Player {

  private char type;

  private int id;

  public void setType(char type) {
    this.type = type;
  }

  public void setId(int id) {
    this.id = id;
  }

  public char getType() {
    return type;
  }

  public int getId() {
    return id;
  }

}
