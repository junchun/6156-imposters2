package controllers;

import models.GameBoard;
import models.Message;
import models.Player;

import com.google.gson.Gson;
import io.javalin.Javalin;
import java.io.IOException;
import java.util.Queue;
import java.util.concurrent.TimeUnit;
import org.eclipse.jetty.websocket.api.Session;

public class PlayGame {

  private static final int PORT_NUMBER = 8080;

  private static Javalin app;
  
  private static GameBoard board;

  /** Main method of the application.
   * @param args Command line arguments
   */
  public static void main(final String[] args) {

    app = Javalin.create(config -> {
      config.addStaticFiles("/public");
    }).start(PORT_NUMBER);
    
    // Create a new game
    app.get("/newgame", ctx -> {
      board = null;
      ctx.redirect("/tictactoe.html");
    });
    
    // Start a new game
    app.post("/startgame", ctx -> {
      if (ctx.formParam("type").isBlank() || (ctx.formParam("type").charAt(0) != 'X'
          && ctx.formParam("type").charAt(0) != 'O')) {
        ctx.status(500).result("Invalid type");
        return;
      }
    
      // Extract the player type and construct the board.
      final char type = ctx.formParam("type").charAt(0);
      board = new GameBoard(type);

      ctx.status(200).result(board.toJson());
    });
    
    // Join an existing game
    app.get("/joingame", ctx -> {
      if (board == null) {
        ctx.status(500).result("Board not initialized");
        return;
      }

      // Try to start the game
      try {
        board.joinGame();
      } catch (Exception e) {
        ctx.status(400).result(e.getMessage());
        return;
      }
      
      ctx.status(302).redirect("/tictactoe.html?p=2");
      // Send board after an async delay to allow p2 to redirect
      sendGameBoardToAllPlayers(board.toJson(), 1);
    });
    
    // Perform a move by the given player
    app.post("/move/:playerId", ctx -> {
      // Ensure the game has already started
      if (board == null || !board.isGameStarted()) {
        ctx.status(400).result("Game not started");
        return;
      }
      
      // Ensure the game is still going
      if (board.isGameOver()) {
        ctx.status(200).result(new Message(false, 101, "Game already over").toJson());
        return;
      }
      
      // Ensure a player ID is provided
      if (ctx.pathParam("playerId").length() != 1) {
        ctx.status(200).result(new Message(false, 102, "Invalid playerId").toJson());
        return;
      }
      
      // Ensure the player ID is valid
      final int playerId = Integer.parseInt(ctx.pathParam("playerId"));
      if (playerId != 1 && playerId != 2) {
        ctx.status(200).result(new Message(false, 103, "Incorrect playerId").toJson());
        return;
      }
      
      // Ensure position is provided
      if (ctx.formParam("x").isBlank() || ctx.formParam("y").isBlank()) {
        ctx.status(200).result(new Message(false, 104, "Missing position").toJson());
        return;
      }
      
      // Extract the necessary information to play a turn
      final Player player = playerId == 1 ? board.getP1() : board.getP2();
      final int x = Integer.parseInt(ctx.formParam("x"));
      final int y = Integer.parseInt(ctx.formParam("y"));
      
      // Try to play a turn and throw an exception if it cannot be played
      try {
        board.playTurn(player, x, y);
      } catch (Exception e) {
        ctx.status(200).result(new Message(false, 105, e.getMessage()).toJson());
        return;
      }
      
      ctx.status(200).result(new Message(true, 100, "").toJson());
      sendGameBoardToAllPlayers(board.toJson());
    });

    // Web sockets - DO NOT DELETE or CHANGE
    app.ws("/gameboard", new UiWebSocket());
  }
  
  /**
   * Asynchronously calls sendGameBoardToAllPlayers after a delay.
   * Catches the IO exception and prints to stack trace.
   * @param gameBoardJson Gameboard JSON
   * @param secDelay The number of seconds to wait before the call.
   */
  private static void sendGameBoardToAllPlayers(final String gameBoardJson, final int secDelay) {
    Thread thread = new Thread(new Runnable() {
      public void run() {
        try {
          TimeUnit.SECONDS.sleep(secDelay);
          sendGameBoardToAllPlayers(new Gson().toJson(board));
        } catch (InterruptedException e) {
          e.printStackTrace();
        }
      }
    });
    thread.start();
  }

  /**
   * Send message to all players.
   * @param gameBoardJson Gameboard JSON
   * @throws IOException Websocket message send IO Exception
   */
  private static void sendGameBoardToAllPlayers(final String gameBoardJson) {
    Queue<Session> sessions = UiWebSocket.getSessions();
    for (Session sessionPlayer : sessions) {
      try {
        sessionPlayer.getRemote().sendString(gameBoardJson);
      } catch (IOException e) {
        e.printStackTrace();
      }
    }
  }

  public static void stop() {
    app.stop();
  }
}

package controllers;

import io.javalin.websocket.WsCloseContext;
import io.javalin.websocket.WsCloseHandler;
import io.javalin.websocket.WsConnectContext;
import io.javalin.websocket.WsConnectHandler;
import io.javalin.websocket.WsHandler;
import java.util.Queue;
import java.util.concurrent.ConcurrentLinkedQueue;
import java.util.function.Consumer;
import org.eclipse.jetty.websocket.api.Session;

/** Web socket class: DO NOT MODIFY.
 * @author Shirish Singh
 *
 */
public class UiWebSocket implements Consumer<WsHandler>  {

  // Store sessions to broadcast a message to all users
  private static final Queue<Session> SESSIONS = new ConcurrentLinkedQueue<>();

  @Override
  public void accept(final WsHandler t) {

    // On Connect
    t.onConnect(new WsConnectHandler() {

      @Override
      public void handleConnect(final WsConnectContext ctx) throws Exception {
        // TODO Auto-generated method stub
        SESSIONS.add(ctx.session);
      }

    });

    // On Close
    t.onClose(new WsCloseHandler() {

      @Override
      public void handleClose(final WsCloseContext ctx) throws Exception {
        SESSIONS.remove(ctx.session);
      }
    });
  }

  public static Queue<Session> getSessions() {
    return SESSIONS;
  }

}

package models;

import com.google.gson.Gson;

public class GameBoard {

  private Player p1;

  private Player p2;

  private boolean gameStarted;

  private int turn;

  private char[][] boardState;

  private int winner;

  private boolean isDraw;

  /**
   * Constructs a new game board.
   * @param p1          Player 1 object.
   * @param p2          Player 2 object.
   * @param gameStarted True if the game has started, false otherwise.
   * @param turn        The player whose turn it is.
   * @param boardState  A 2D array representing the board.
   * @param winner      The number of the winning player.
   * @param isDraw      True if the game results in a draw.
   */
  public GameBoard(Player p1, Player p2, boolean gameStarted, int turn, char[][] boardState, int winner,
      boolean isDraw) {
    super();
    this.p1 = p1;
    this.p2 = p2;
    this.gameStarted = gameStarted;
    this.turn = turn;
    this.boardState = boardState;
    this.winner = winner;
    this.isDraw = isDraw;
  }

  /**
   * Starts a fresh game.
   * @param p1Type Player 1's type.
   */
  public GameBoard(char p1Type) {
    super();
    this.p1 = new Player(p1Type, 1);
    this.gameStarted = false;
    this.turn = 1;
    this.boardState = new char[3][3];
    this.winner = 0;
    this.isDraw = false;
  }

  /**
   * Gets the first player.
   * @return The Player 1 object.
   */
  public Player getP1() {
    return p1;
  }

  /**
   * Sets the first player.
   * @param p1 The Player 1 object.
   */
  public void setP1(Player p1) {
    this.p1 = p1;
  }

  /**
   * Gets the second player.
   * @return The Player 2 object.
   */
  public Player getP2() {
    return p2;
  }

  /**
   * Sets the second player.
   * @param p2 The Player 2 object.
   */
  public void setP2(Player p2) {
    this.p2 = p2;
  }

  /**
   * Checks if the game has ended.
   * @return True if the game is over, false otherwise.
   */
  public boolean isGameOver() {
    return winner != 0 || isDraw;
  }

  /**
   * Checks if the game has started.
   * @return True if the game has started, false otherwise.
   */
  public boolean isGameStarted() {
    return gameStarted;
  }

  /**
   * Changes whether or not the game is started.
   * @param gameStarted True if the game is started, false otherwise.
   */
  public void setGameStarted(boolean gameStarted) {
    this.gameStarted = gameStarted;
  }

  /**
   * Gets the player ID for whose turn it currently is.
   * @return The numerical turn.
   */
  public int getTurn() {
    return turn;
  }

  /**
   * Sets the player ID for whose turn it currently is.
   * @param turn The numerical turn to set.
   */
  public void setTurn(int turn) {
    this.turn = turn;
  }

  /**
   * Gets the board as a 2D char array.
   * @return The 2d char array representation of the board.
   */
  public char[][] getBoardState() {
    return boardState;
  }

  /**
   * Sets the 2D char array board.
   * @param boardState The 2d char array representation of the board.
   */
  public void setBoardState(char[][] boardState) {
    this.boardState = boardState;
  }

  /**
   * Returns the winning player ID.
   * @return The ID of the winning player.
   */
  public int getWinner() {
    return winner;
  }

  /**
   * Sets the winning player ID.
   * @param winner The ID of the winning player.
   */
  public void setWinner(int winner) {
    this.winner = winner;
  }

  /**
   * Returns true if there is a draw.
   * @return True if there is a draw, false otherwise.
   */
  public boolean isDraw() {
    return isDraw;
  }

  /**
   * Sets whether or not there is a draw.
   * @param isDraw True if there is a draw, false otherwise.
   */
  public void setDraw(boolean isDraw) {
    this.isDraw = isDraw;
  }

  /**
   * Lets a second player join the game, and starts the game.
   * @throws Exception A simple exception thrown if the game has already started
   *                   and has not ended.
   */
  public void joinGame() throws Exception {
    if (gameStarted && (winner != 0 || isDraw)) {
      throw new Exception("Game already started");
    }
    p2 = new Player(p1.getType() == 'X' ? 'O' : 'X', 2);
    gameStarted = true;
  }

  /**
   * Plays a turn for the given player in the (x, y) coordinate specified.
   * @param player The player to play the turn for.
   * @param x      The x-position.
   * @param y      The y-position.
   * @throws Exception A simple exception if the move cannot be made: either the
   *                   position is out of bounds, the position is already filled,
   *                   or it's not the player's turn.
   */
  public void playTurn(Player player, int x, int y) throws Exception {
    final char type = player.getType();
    if (x < 0 || y < 0 || x > 2 || y > 2) {
      throw new Exception("Invalid position");
    } else if (boardState[x][y] != '\0') {
      throw new Exception("Position already filled");
    } else if (player.getId() != turn) {
      throw new Exception("Not your turn");
    }
    boardState[x][y] = type;
    updateWinner();
  }

  /**
   * Updates the Gameboard with the winner and whether or not there is a draw.
   */
  private void updateWinner() {
    // True if P1 wins
    boolean p1Wins = false;
    // True if P2 wins
    boolean p2Wins = false;
    // True if the board contains an empty spot
    boolean containsEmpty = false;

    // Counts the number of P1 moves (reused)
    int countP1 = 0;
    // Counts the number of P2 moves (reused)
    int countP2 = 0;
    // Stores the currently located move in each iteration
    char move = '\0';

    // Check horizontally
    for (int i = 0; i < 3; i++) {
      countP1 = 0;
      countP2 = 0;
      for (int j = 0; j < 3; j++) {
        move = boardState[i][j];
        countP1 += move == p1.getType() ? 1 : 0;
        countP2 += move == p2.getType() ? 1 : 0;
        containsEmpty = containsEmpty || move == '\0';
      }
      if (countP1 == 3) {
        p1Wins = true;
      } else if (countP2 == 3) {
        p2Wins = true;
      }
    }

    // Check vertically
    for (int i = 0; i < 3; i++) {
      countP1 = 0;
      countP2 = 0;
      for (int j = 0; j < 3; j++) {
        move = boardState[j][i];
        countP1 += move == p1.getType() ? 1 : 0;
        countP2 += move == p2.getType() ? 1 : 0;
      }
      if (countP1 == 3) {
        p1Wins = true;
      } else if (countP2 == 3) {
        p2Wins = true;
      }
    }

    // Check diagonally from top-left
    countP1 = 0;
    countP2 = 0;
    for (int i = 0; i < 3; i++) {
      move = boardState[i][i];
      countP1 += move == p1.getType() ? 1 : 0;
      countP2 += move == p2.getType() ? 1 : 0;
    }
    if (countP1 == 3) {
      p1Wins = true;
    } else if (countP2 == 3) {
      p2Wins = true;
    }

    // Check diagonally from top-right
    countP1 = 0;
    countP2 = 0;
    for (int i = 0; i < 3; i++) {
      move = boardState[i][2 - i];
      countP1 += move == p1.getType() ? 1 : 0;
      countP2 += move == p2.getType() ? 1 : 0;
    }
    if (countP1 == 3) {
      p1Wins = true;
    } else if (countP2 == 3) {
      p2Wins = true;
    }

    if ((p1Wins && p2Wins) || (!p1Wins && !p2Wins && !containsEmpty)) {
      // Draw situation
      setDraw(true);
    } else if (p1Wins) {
      // P1 wins
      setWinner(1);
    } else if (p2Wins) {
      // P2 wins
      setWinner(2);
    } else {
      // Increment the turn
      setTurn(turn == 1 ? 2 : 1);
    }
  }

  /**
   * Convert this Board into a JSON string.
   * @return A JSON Board string.
   */
  public String toJson() {
    return new Gson().toJson(this);
  }

}
package models;

import com.google.gson.Gson;

public class Message {

  private boolean moveValidity;

  private int code;

  private String message;

  /**
   * Constructs a new game message.
   * @param moveValidity True if the move is valid, false otherwise.
   * @param code The move's code.
   * @param message A string message associated with the move.
   */
  public Message(boolean moveValidity, int code, String message) {
    super();
    this.moveValidity = moveValidity;
    this.code = code;
    this.message = message;
  }

  /**
   * Checks if the move is a valid one.
   * @return True if the move is valid, false otherwise.
   */
  public boolean isMoveValid() {
    return moveValidity;
  }

  /**
   * Sets whether or not the move is a valid one.
   * @param moveValidity True if the move is valid, false otherwise.
   */
  public void setMoveValidity(boolean moveValidity) {
    this.moveValidity = moveValidity;
  }

  /**
   * Gets the response code of the message.
   * @return The response code as an int.
   */
  public int getCode() {
    return code;
  }

  /**
   * Sets the response code of the message.
   * @param code The response code as an int.
   */
  public void setCode(int code) {
    this.code = code;
  }

  /**
   * Gets the string content of the message.
   * @return The string message content.
   */
  public String getMessage() {
    return message;
  }

  /**
   * Sets the string content of the message.
   * @param message The string message content.
   */
  public void setMessage(String message) {
    this.message = message;
  }
  
  /**
   * Convert this Message into a JSON string.
   * @return A JSON Message string.
   */
  public String toJson() {
    return new Gson().toJson(this);
  }

}
package models;

public class Move {

  private Player player;

  private int moveX;

  private int moveY;

  /**
   * Constructs a move object.
   * @param player The player associated with the move.
   * @param moveX The horizontal position of the move.
   * @param moveY The vertical position of the move.
   */
  public Move(Player player, int moveX, int moveY) {
    super();
    this.player = player;
    this.moveX = moveX;
    this.moveY = moveY;
  }

  /**
   * Gets the player who made this move.
   * @return A Player object.
   */
  public Player getPlayer() {
    return player;
  }

  /**
   * Sets the player who made this move.
   * @param player A Player object.
   */
  public void setPlayer(Player player) {
    this.player = player;
  }

  /**
   * Gets the x-coordinate of this move.
   * @return The x-coordinate as an integer.
   */
  public int getMoveX() {
    return moveX;
  }

  /**
   * Sets the x-coordinate of this move.
   * @param moveX The x-coordinate as an integer.
   */
  public void setMoveX(int moveX) {
    this.moveX = moveX;
  }

  /**
   * Gets the y-coordinate of this move.
   * @return The y-coordinate as an integer.
   */
  public int getMoveY() {
    return moveY;
  }

  /**
   * Sets the y-coordinate of this move.
   * @param moveY The y-coordinate as an integer.
   */
  public void setMoveY(int moveY) {
    this.moveY = moveY;
  }

}
package models;

public class Player {

  private char type;

  private int id;

  /**
   * Constructs a new player.
   * @param type The character the player is using ('X' or 'O').
   * @param id The unique identifier of the player.
   */
  public Player(char type, int id) {
    super();
    this.type = type;
    this.id = id;
  }

  /**
   * 'X' or 'O' for the player.
   * @return The character the player uses in the game.
   */
  public char getType() {
    return type;
  }

  /**
   * Sets 'X' or 'O' for the player.
   * @param type The character the player uses in the game.
   */
  public void setType(char type) {
    this.type = type;
  }

  /**
   * Gets the player's ID (1 or 2).
   * @return The numerical Player ID.
   */
  public int getId() {
    return id;
  }

  /**
   * Sets the player's ID.
   * @param id The numerical Player ID.
   */
  public void setId(int id) {
    this.id = id;
  }

}
