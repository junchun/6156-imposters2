package controllers;

import com.google.gson.Gson;
import io.javalin.Javalin;
import java.io.IOException;
import java.util.Queue;
import models.GameBoard;
import models.Message;
import models.Move;
import models.Player;
import models.error.InvalidMoveException;
import org.eclipse.jetty.websocket.api.Session;

class PlayGame {

  private static final int PORT_NUMBER = 8080;

  private static Javalin app;

  /** Main method of the application.
   * @param args Command line arguments
   */
  public static void main(final String[] args) {
    final Gson gson = new Gson();
    final GameBoard board = new GameBoard();

    app = Javalin.create(config -> {
      config.addStaticFiles("/public");
    }).start(PORT_NUMBER);

    // Test Echo Server
    app.post("/echo", ctx -> {
      ctx.result(ctx.body());
    });

    app.get("/newgame", ctx -> {
      board.newGame();
      ctx.redirect("/tictactoe.html");
    });

    app.post("/startgame", ctx -> {
      String type = ctx.formParam("type");
      char c;
      if (type.equals("X")) {
        c = 'X';
      } else if (type.equals("O")) {
        c = 'O';
      } else {
        ctx.status(400);
        return;
      }

      board.setPlayer1(new Player(c, 1));
      ctx.result(gson.toJson(board));
    });

    app.get("/joingame", ctx -> {
      Player player1 = board.getPlayer1();
      if (player1 == null) {
        ctx.result("Player 1 not joined yet");
        return;
      }

      char c;
      if (player1.getType() == 'X') {
        c = 'O';
      } else {
        c = 'X';
      }
      
      board.setPlayer2(new Player(c, 2));
      board.startGame();

      ctx.redirect("/tictactoe.html?p=2");

      sendGameBoardToAllPlayers(gson.toJson(board));
    });
    
    app.post("/move/:playerId", ctx -> {
      int playerId = Integer.parseInt(ctx.pathParam("playerId"));
      int x = Integer.parseInt(ctx.formParam("x"));
      int y = Integer.parseInt(ctx.formParam("y"));

      Player player = null;
      if (playerId == board.getPlayer1().getId()) {
        player = board.getPlayer1();
      } else if (playerId == board.getPlayer2().getId()) {
        player = board.getPlayer2();
      } else {
        ctx.status(400);
        ctx.result("Invalid player id");
        return;
      }
      
      try {
        board.move(new Move(player, x, y));
        ctx.result(gson.toJson(new Message(true, 100, "")));
      } catch (InvalidMoveException e) {
        ctx.result(gson.toJson(new Message(false, e.code(), e.cause())));
      }

      sendGameBoardToAllPlayers(gson.toJson(board));
    });

    // Web sockets - DO NOT DELETE or CHANGE
    app.ws("/gameboard", new UiWebSocket());
  }

  /** Send message to all players.
   * @param gameBoardJson Gameboard JSON
   * @throws IOException Websocket message send IO Exception
   */
  private static void sendGameBoardToAllPlayers(final String gameBoardJson) {
    Queue<Session> sessions = UiWebSocket.getSessions();
    for (Session sessionPlayer : sessions) {
      try {
        sessionPlayer.getRemote().sendString(gameBoardJson);
      } catch (IOException e) {
        // Add logger here
      }
    }
  }

  public static void stop() {
    app.stop();
  }
}

package controllers;

import io.javalin.websocket.WsCloseContext;
import io.javalin.websocket.WsCloseHandler;
import io.javalin.websocket.WsConnectContext;
import io.javalin.websocket.WsConnectHandler;
import io.javalin.websocket.WsHandler;
import java.util.Queue;
import java.util.concurrent.ConcurrentLinkedQueue;
import java.util.function.Consumer;
import org.eclipse.jetty.websocket.api.Session;

/** Web socket class: DO NOT MODIFY.
 * @author Shirish Singh
 *
 */
public class UiWebSocket implements Consumer<WsHandler>  {

  // Store sessions to broadcast a message to all users
  private static final Queue<Session> SESSIONS = new ConcurrentLinkedQueue<>();

  @Override
  public void accept(final WsHandler t) {

    // On Connect
    t.onConnect(new WsConnectHandler() {

      @Override
      public void handleConnect(final WsConnectContext ctx) throws Exception {
        // TODO Auto-generated method stub
        SESSIONS.add(ctx.session);
      }

    });

    // On Close
    t.onClose(new WsCloseHandler() {

      @Override
      public void handleClose(final WsCloseContext ctx) throws Exception {
        SESSIONS.remove(ctx.session);
      }
    });
  }

  public static Queue<Session> getSessions() {
    return SESSIONS;
  }

}

package models;

import models.error.AlreadyOccupiedExcpetion;
import models.error.InvalidMoveException;
import models.error.InvalidPositionException;
import models.error.NotYourTurnException;

public class GameBoard {

  private Player p1;

  private Player p2;

  private boolean gameStarted;

  private int turn;

  private char[][] boardState;

  private int winner;

  private boolean isDraw;

  /**
   * Create a new board with reasonable initial state.
   */
  public GameBoard() {
    newGame();
  }
  
  /**
   *  Reset the board to initial state.
   */
  public void newGame() {
    this.p1 = this.p2 = null;
    this.gameStarted = false;;
    this.turn = 1;

    this.boardState = new char[3][3];
    for (int i = 0; i < 3; ++i) {
      for (int j = 0; j < 3; ++j) {
        this.boardState[i][j] = 0;
      }
    }
    
    this.winner = 0;
    this.isDraw = false;
  }

  /**
   * Set the first player of this game to specified player.
   */
  public void setPlayer1(Player player) {
    this.p1 = player;
  }

  /**
   * Set the second player of this game to specified player.
   */
  public void setPlayer2(Player player) {
    this.p2 = player;
  }
  
  /**
   * Get the first player.
   */
  public Player getPlayer1() {
    return this.p1;
  }

  /**
   * Get the second player.
   */
  public Player getPlayer2() {
    return this.p2;
  }
  
  /**
   * Start the game.
   */
  public void startGame() {
    this.gameStarted = true;
  }
  
  /**
   * Let the player p place a move at position specified by x and y.
   */
  public void move(Move move) throws InvalidMoveException {
    Player player = move.getPlayer();
    int x = move.getX();
    int y = move.getY();

    if (x < 0 || x >= 3 || y < 0 || y >= 3) {
      throw new InvalidPositionException();
    }

    if (turn != player.getId()) {
      throw new NotYourTurnException();
    }

    if (boardState[x][y] != 0) {
      throw new AlreadyOccupiedExcpetion();
    }
          
    boardState[x][y] = player.getType();
    turn = player.getId() == p1.getId() ? p2.getId() : p1.getId();
    
    checkWinner();
  }
  
  private static boolean threeEqual(char a, char b, char c) {
    return a == b && b == c && a != 0;
  }
  
  private void checkWinner() {
    // Horizontal && Vertical
    for (int i = 0; i < 3; ++i) {
      if (threeEqual(boardState[i][0], boardState[i][1], boardState[i][2])) {
        setWinner(boardState[i][0]);
        return;
      }

      if (threeEqual(boardState[0][i], boardState[1][i], boardState[2][i])) {
        setWinner(boardState[0][i]);
        return;
      }
    }
    
    // Diagonals
    if (threeEqual(boardState[0][0], boardState[1][1], boardState[2][2])) {
      setWinner(boardState[1][1]);
      return;
    }

    if (threeEqual(boardState[2][0], boardState[1][1], boardState[0][2])) {
      setWinner(boardState[1][1]);
      return;
    }
    
    // Check if is draw
    for (int i = 0; i < 3; ++i) {
      for (int j = 0; j < 3; ++j) {
        if (boardState[i][j] == 0) {
          return;
        }
      }
    }
    
    isDraw = true;
  }
  
  private void setWinner(char c) {
    if (c == p1.getType()) {
      winner = p1.getId();
    } else {
      winner = p2.getId();
    }
  }
}

package models;

public class Message {

  private boolean moveValidity;

  private int code;

  private String message;
  
  /**
   * Create a new Message object with the specified parameters.
   */
  public Message(boolean moveValidity, int code, String message) {
    this.moveValidity = moveValidity;
    this.code  = code;
    this.message = message;
  }

}

package models;

public class Move {

  private final Player player;

  private final int moveX;

  private final int moveY;

  public final Player getPlayer() {
    return player;
  }

  public int getX() {
    return moveX;
  }

  public int getY() {
    return moveY;
  }

  /** 
   * Create a new Move object using the specified parameters.
   */
  public Move(Player player, int moveX, int moveY) {
    this.player = player;
    this.moveX = moveX;
    this.moveY = moveY;
  }

}

package models;

public class Player {

  private char type;

  private int id;

  /**
   * Create a new Player with the specified type and id.
   */
  public Player(char type, int id) {
    this.type = type;
    this.id = id;
  }
  
  /**
   * Return the character used by this player.
   */
  public char getType() {
    return this.type;
  }

  /**
   * Return the id of this player.
   */
  public int getId() {
    return this.id;
  }
}
