package controllers;

import io.javalin.Javalin;
import java.io.IOException;
import java.util.Queue;
import org.eclipse.jetty.websocket.api.Session;

import com.google.gson.Gson;

import models.GameBoard;
import models.Message;
import models.Move;
import models.Player;

class PlayGame {

  private static final int PORT_NUMBER = 8080;

  private static Javalin app;
  
  private static GameBoard gb = new GameBoard();
  
  private static Player p1 = new Player();
  
  private static Player p2 = new Player();
  
  private static Move p1_move = new Move();
  
  private static Move p2_move = new Move();
  
  private static Message report = new Message();

  static Gson gson = new Gson();
  
  /** Main method of the application.
   * @param args Command line arguments
   */
  public static void main(final String[] args) {

    app = Javalin.create(config -> {
      config.addStaticFiles("/public");
    }).start(PORT_NUMBER);

    // Test Echo Server
    app.post("/echo", ctx -> {
      ctx.result(ctx.body());
    });

    //start a new game
    app.get("/newgame", ctx -> {
      ctx.redirect("/tictactoe.html");
    });

    //Initialize the game board and setup Player 1
    app.post("/startgame", ctx -> {
      String msg = ctx.body();
      char type = msg.split("=")[1].charAt(0);
      p1.setId(1);
      p1.setType(type);
      gb.setP1(p1);
      p1_move.setPlayer(p1);
      gb.setGameStarted(true);
      if (type == 'X') {
          p2.setId(2);
          p2.setType('O');
      } else if (type == 'O') {
        p2.setId(2);
        p2.setType('X');
      }
      gb.setP2(p2);
      p2_move.setPlayer(p2);
      gb.setTurn(1);
      //System.out.println(gson.toJson(gb));
      ctx.result(gson.toJson(gb));
    });
    
    //Update the game board after player2 joins in
    app.get("/joingame", ctx -> {
      ctx.redirect("/tictactoe.html?p=2");
      //System.out.println(gson.toJson(gb));
      ctx.result(gson.toJson(gb));
      sendGameBoardToAllPlayers(gson.toJson(gb));
    });
    
    //Update player1's move
    app.post("/move/1", ctx -> {
      
      if (gb.getTurn() == 1 && gb.getWinner() == 0 && gb.isDraw() == false) 
      {
    	String msg = ctx.body();
        char[] coord = {msg.split("&")[0].charAt(2), msg.split("&")[1].charAt(2)};
        int is_valid_move = gb.checkGB(Character.getNumericValue(coord[0]), Character.getNumericValue(coord[1]));
    	if (is_valid_move == 1)
    	{
    		gb.setBoardState(Character.getNumericValue(coord[0]), Character.getNumericValue(coord[1]), gb.getp1().getType());
    		gb.setTurn(2);
    		p1_move.setMoveX(Character.getNumericValue(coord[0]));
    		p1_move.setMoveY(Character.getNumericValue(coord[1]));
    		
    		boolean game_result = gb.checkwin(1);
    		if (game_result)
    		{
    			//win message
    			report.setCode(400);
    			report.setMoveValidity(true);
    			report.setMessage("Player1 wins!");
    			gb.setGameStarted(false);
    			gb.setWinner(1);
    			sendGameBoardToAllPlayers(gson.toJson(gb));
    		} else {
    			boolean is_draw = gb.checkdraw();
    			if (is_draw)
    			{	
    				//draw message
    				report.setCode(300);
    				report.setMoveValidity(true);
    				report.setMessage("Game Draw!");
    				gb.setGameStarted(false);
    				gb.setDraw(true);
    				sendGameBoardToAllPlayers(gson.toJson(gb));
    				
    			} else if (game_result == false && is_draw == false)
    			{
    				//regular move message
    				report.setCode(200);
    				report.setMoveValidity(true);
    				report.setMessage("");
    				sendGameBoardToAllPlayers(gson.toJson(gb));
    				
    			}
    		}
    		
    	} else if(is_valid_move == -1)
    	{
    		//error message for out of range
    		report.setCode(700);
        	report.setMoveValidity(false);
    		report.setMessage("Out of Range!");
    		sendGameBoardToAllPlayers(gson.toJson(gb));
    	} else
    	{
    		//error message for already occupied places
    		report.setCode(600);
	    	report.setMoveValidity(false);
			report.setMessage("The place is already occupied!");
			sendGameBoardToAllPlayers(gson.toJson(gb));
    	}
		ctx.result(gson.toJson(report));
      } else {
    	if (gb.getTurn() == 2)
    	{
    		//error message
    		report.setCode(100);
    		report.setMoveValidity(false);
    		report.setMessage("This is player2\'s Turn!");
    	} else
    	{
    		//error message
    		report.setCode(500);
    		report.setMoveValidity(false);
    		report.setMessage("The game is already end!");
    	}
    	
    	ctx.result(gson.toJson(report));
      }
      //System.out.println(gson.toJson(gb));
      //System.out.println(gson.toJson(report));
      
    });
    
    //Update player2's move
    app.post("/move/2", ctx -> {
      
      if (gb.getTurn() == 2 && gb.getWinner() == 0 && gb.isDraw() == false) 
      {
    	String msg = ctx.body();
        char[] coord = {msg.split("&")[0].charAt(2), msg.split("&")[1].charAt(2)};
        int is_valid_move = gb.checkGB(Character.getNumericValue(coord[0]), Character.getNumericValue(coord[1]));
        if (is_valid_move == 1)
    	{
    		gb.setBoardState(Character.getNumericValue(coord[0]), Character.getNumericValue(coord[1]), gb.getp2().getType());
    		gb.setTurn(1);
    		p2_move.setMoveX(Character.getNumericValue(coord[0]));
    		p2_move.setMoveY(Character.getNumericValue(coord[1]));
    		
    		boolean game_result = gb.checkwin(2);
    		if (game_result)
    		{
    			//win message
    			report.setCode(400);
    			report.setMoveValidity(true);
    			report.setMessage("Player2 wins!");
    			gb.setGameStarted(false);
    			gb.setWinner(2);
    			sendGameBoardToAllPlayers(gson.toJson(gb));
    		} else {
    			boolean is_draw = gb.checkdraw();
    			if (is_draw)
    			{	
    				//draw message
    				report.setCode(300);
    				report.setMoveValidity(true);
    				report.setMessage("Game Draw!");
    				gb.setGameStarted(false);
    				gb.setDraw(true);
    				sendGameBoardToAllPlayers(gson.toJson(gb));
    			} else if (game_result == false && is_draw == false)
    			{
    				//regular move message
    				report.setCode(200);
    				report.setMoveValidity(true);
    				report.setMessage("");
    				sendGameBoardToAllPlayers(gson.toJson(gb));
    			}
    		}
    		
    	} else if(is_valid_move == -1)
    	{
    		//error message for out of range
    		report.setCode(700);
        	report.setMoveValidity(false);
    		report.setMessage("Out of Range!");
    		sendGameBoardToAllPlayers(gson.toJson(gb));
    	} else
    	{
    		//error message for already occupied places
    		report.setCode(600);
	    	report.setMoveValidity(false);
			report.setMessage("The place is already occupied!");
			sendGameBoardToAllPlayers(gson.toJson(gb));
    	}
        ctx.result(gson.toJson(report));
      } else {
    	  if (gb.getTurn() == 1)
      	  {
      		//error message
      		report.setCode(100);
      		report.setMoveValidity(false);
      		report.setMessage("This is player1\'s Turn!");
      	  } else
      	  {
      		//error message
      		report.setCode(500);
      		report.setMoveValidity(false);
      		report.setMessage("The game is already end!");
      	  }
    	ctx.result(gson.toJson(report));
      }
      //System.out.println(gson.toJson(gb));
      //System.out.println(gson.toJson(report));
      
    });
    
    // Web sockets - DO NOT DELETE or CHANGE
    app.ws("/gameboard", new UiWebSocket());
  }

  /** Send message to all players.
   * @param gameBoardJson Gameboard JSON
   * @throws IOException Websocket message send IO Exception
   */
  private static void sendGameBoardToAllPlayers(final String gameBoardJson) {
    Queue<Session> sessions = UiWebSocket.getSessions();
    for (Session sessionPlayer : sessions) {
      try {
        sessionPlayer.getRemote().sendString(gameBoardJson);
      } catch (IOException e) {
        // Add logger here
    	  System.out.println("logger report");
      }
    }
  }

  public static void stop() {
    app.stop();
  }
}
package controllers;

import io.javalin.websocket.WsCloseContext;
import io.javalin.websocket.WsCloseHandler;
import io.javalin.websocket.WsConnectContext;
import io.javalin.websocket.WsConnectHandler;
import io.javalin.websocket.WsHandler;
import java.util.Queue;
import java.util.concurrent.ConcurrentLinkedQueue;
import java.util.function.Consumer;
import org.eclipse.jetty.websocket.api.Session;

/** Web socket class: DO NOT MODIFY.
 * @author Shirish Singh
 *
 */
public class UiWebSocket implements Consumer<WsHandler>  {

  // Store sessions to broadcast a message to all users
  private static final Queue<Session> SESSIONS = new ConcurrentLinkedQueue<>();

  @Override
  public void accept(final WsHandler t) {

    // On Connect
    t.onConnect(new WsConnectHandler() {

      @Override
      public void handleConnect(final WsConnectContext ctx) throws Exception {
        // TODO Auto-generated method stub
        SESSIONS.add(ctx.session);
      }

    });

    // On Close
    t.onClose(new WsCloseHandler() {

      @Override
      public void handleClose(final WsCloseContext ctx) throws Exception {
        SESSIONS.remove(ctx.session);
      }
    });
  }

  public static Queue<Session> getSessions() {
    return SESSIONS;
  }

}
package models;

public class GameBoard {

  private Player p1;

  private Player p2;

  private boolean gameStarted;

  private int turn;

  private char[][] boardState;

  private int winner;

  private boolean isDraw;
  
  //Default Constructor
  public GameBoard(){
  this.p1 = new Player();
  this.p2 = new Player();
  this.gameStarted = false;
  this.setTurn(0);
  this.boardState = new char[][]{ {'\u0000','\u0000','\u0000'},{'\u0000','\u0000','\u0000'},{'\u0000','\u0000','\u0000'} };
  this.setWinner(0);
  this.isDraw = false;
  }

  
  //getter of Board State
  public char[][] getBoardState() {
    return boardState;
  }
  
  //setter of Board State
  public void setBoardState(int x, int y, char type) {
  this.boardState[x][y] = type;
  }

  //setter of gameStarted
  public void setGameStarted(boolean gameStarted) {
  this.gameStarted = gameStarted;
  }
  
  //setter of player1
  public void setP1(Player p1) {
  this.p1 = p1;
  }
  
  //getter of player1
  public Player getp1() {
    return p1;
  }
  
  //setter of player2
  public void setP2(Player p2) {
  this.p2 = p2;
  }
  
  //getter of player1
  public Player getp2() {
    return p2;
  }

  //setter of turn
  public void setTurn(int turn) {
  this.turn = turn;
  }
  
  //getter of turn
  public int getTurn() {
    return turn;
  }
  
  //check game board state
  public int checkGB(int x, int y)
  {
  int x_coord = this.boardState.length;
  int y_coord = this.boardState[0].length; 
  
  if (x>=x_coord || y>=y_coord)
  {
    return -1;
  } else
  {
    if (this.boardState[x][y] == 'O' || this.boardState[x][y] == 'X')
    {
      return 0;
    } else
    {
      return 1;
    }
  }
  }
  
  //getter of win status
  public int getWinner() {
  return winner;
  }

  //setter of win status
  public void setWinner(int winner) {
  this.winner = winner;
  }

  public boolean isDraw() {
  return isDraw;
  }

  //setter of Draw
  public void setDraw(boolean isDraw) {
  this.isDraw = isDraw;
  }
  
  //check whether a specific player is win
  public boolean checkwin(int player) {
    boolean check_gameboard = false;
    if (player == 1)
    {
      char type = getp1().getType();
      
        //check whether the row indicates player1's victory
      for (int i=0; i<getBoardState().length; i++)
      {
        if (getBoardState()[i][0] == type)
      {
        for (int j=1; j<getBoardState()[i].length; j++)
        {
          if (getBoardState()[i][j] != type)
        {
          break;
        } else
        {
          if (j==getBoardState()[i].length-1)
          {
            check_gameboard = true;
          return check_gameboard;
          }
        }
            }
        }
       }
        
       //check whether the column indicates player1's victory
       for (int i=0; i<getBoardState()[0].length; i++)
       {
         if (getBoardState()[0][i] == type)
       {
         for (int j=1; j<getBoardState().length; j++)
         {
           if (getBoardState()[j][i] != type)
         {
           break;
         } else
         {
           if (j == getBoardState().length-1)
           {
             check_gameboard = true;
           return check_gameboard;
           }
           }
           }
         }
         }
        
       //check whether the diagonal indicates player1's victory
       for (int i=0; i<getBoardState()[0].length; i++)
       {
         if (getBoardState()[0][i] == type)
       {
         if (i == 0)
         {
           int k = i+1;
           while(k < getBoardState().length)
           {
             if (getBoardState()[k][k] != type)
             {
               break;
             }
             k += 1;
           }
           if (k == getBoardState().length)
           {
             check_gameboard = true;
             return check_gameboard;
           }
         } else if (i == getBoardState()[0].length-1)
         {
           int k = i-1;
           int j = 1;
           while(k>=0 && j<getBoardState().length)
           {
             if (getBoardState()[j][k] != type)
             {
               break;
             }
             k -= 1;
             j += 1;
           }
           if (k < 0 && j == getBoardState().length)
           {
             check_gameboard = true;
             return check_gameboard;
           }
         }
         }
         }

    } else if (player == 2)
    {
      char type = getp2().getType();
      
        //check whether the row indicates player2's victory
      for (int i=0; i<getBoardState().length; i++)
      {
        if (getBoardState()[i][0] == type)
      {
        for (int j=1; j<getBoardState()[i].length; j++)
        {
          if (getBoardState()[i][j] != type)
        {
          break;
        } else
        {
          if (j==getBoardState()[i].length-1)
          {
            check_gameboard = true;
          return check_gameboard;
          }
        }
            }
        }
       }
        
       //check whether the column indicates player2's victory
       for (int i=0; i<getBoardState()[0].length; i++)
       {
         if (getBoardState()[0][i] == type)
       {
         for (int j=1; j<getBoardState().length; j++)
         {
           if (getBoardState()[j][i] != type)
         {
           break;
         } else
         {
           if (j == getBoardState().length-1)
           {
             check_gameboard = true;
           return check_gameboard;
           }
           }
           }
         }
         }
        
       //check whether the diagonal indicates player2's victory
       for (int i=0; i<getBoardState()[0].length; i++)
       {
         if (getBoardState()[0][i] == type)
       {
         if (i == 0)
         {
           int k = i+1;
           while(k < getBoardState().length)
           {
             if (getBoardState()[k][k] != type)
             {
               break;
             }
             k += 1;
           }
           if (k == getBoardState().length)
           {
             check_gameboard = true;
             return check_gameboard;
           }
         } else if (i == getBoardState()[0].length-1)
         {
           int k = i-1;
           int j = 1;
           while(k>=0 && j<getBoardState().length)
           {
             if (getBoardState()[j][k] != type)
             {
               break;
             }
             k -= 1;
             j += 1;
           }
           if (k < 0 && j == getBoardState().length)
           {
             check_gameboard = true;
             return check_gameboard;
           }
         }
         }
         }

    }
  return check_gameboard;
  }
  
  //check whether the game is draw
  public boolean checkdraw()
  {
    if (checkwin(1) || checkwin(2))
    {
      return false;
    }else
    {
      for (int i=0; i<getBoardState().length; i++)
      {
        for (int j=0; j<getBoardState()[i].length; j++)
        {
          if (getBoardState()[i][j] == '\u0000')
          {
            return false;
          }
        }
      }
    }
    return true;
  }
}
package models;

public class Message {

  private boolean moveValidity;

  private int code;

  private String message;

  //getter of the move validity message
  public boolean isMoveValidity() {
  return moveValidity;
  }

  //setter of the move validity message
  public void setMoveValidity(boolean moveValidity) {
  this.moveValidity = moveValidity;
  }

  //getter of the code
  public int getCode() {
  return code;
  }

  //setter of the code
  public void setCode(int code) {
  this.code = code;
  }

  //getter of the message
  public String getMessage() {
  return message;
  }

  //setter of the message
  public void setMessage(String message) {
  this.message = message;
  }

}
package models;

public class Move {

  private Player player;

  private int moveX;

  private int moveY;

  //getter of the player of a specific move
  public Player getPlayer() {
  return player;
  }

  //setter of the player of a specific move
  public void setPlayer(Player player) {
  this.player = player;
  }

  //getter of the move in x coordinate
  public int getMoveX() {
  return moveX;
  }

  //setter of the move in x coordinate
  public void setMoveX(int moveX) {
  this.moveX = moveX;
  }

  //getter of the move in y coordinate
  public int getMoveY() {
  return moveY;
  }

  //setter of the move in y coordinate
  public void setMoveY(int moveY) {
  this.moveY = moveY;
  }

}


package models;

public class Player {

  private char type;

  private int id;

  //Constructor
  public Player(){
    this.type = ' ';
    this.id = 0;
  }
  
  //getter and setter of type and id
  public char getType() {
  return type;
  }

  public void setType(char type) {
  this.type = type;
  }

  public int getId() {
  return id;
  }

  public void setId(int id) {
  this.id = id;
  }
  
}


