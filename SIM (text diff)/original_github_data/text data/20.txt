package controllers;

import com.google.gson.Gson;
import io.javalin.Javalin;
import java.io.IOException;
import java.util.Queue;
import models.GameBoard;
import models.Message;
import models.Move;
import models.Player;
import org.eclipse.jetty.websocket.api.Session;

class PlayGame {

  private static final int PORT_NUMBER = 8080;
  private static Gson gson = new Gson();
  private static Javalin app;
  private static GameBoard gameboard;
  private static Player p1;
  private static Player p2;

  /** Main method of the application.
   * @param args Command line arguments
   */
  public static void main(final String[] args) {

    app = Javalin.create(config -> {
      config.addStaticFiles("/public");
    }).start(PORT_NUMBER);

    // Test Echo Server
    app.post("/echo", ctx -> {
      ctx.result(ctx.body());
    });

    // Redirect to new game
    app.get("/", ctx -> {
      ctx.redirect("/newgame");
    });
    
    // Start a new game
    app.get("/newgame", ctx -> {
      gameboard = new GameBoard();
      ctx.redirect("/tictactoe.html");
    });
    
    // Player 1 starts the game
    app.post("/startgame", ctx -> {
      String str = ctx.body();
      char type = str.charAt(str.length() - 1);
      p1 = new Player(type, 1);
      
      gameboard.setPlayer1(p1);
      ctx.status(201); // created
      ctx.result(gson.toJson(gameboard));
    });
    
    // Player 2 joins the game
    app.get("/joingame", ctx -> {
      char type = 'O';
      if (p1.getType() == 'O') {
        type = 'X';
      }
      p2 = new Player(type, 2);
      gameboard.setPlayer2(p2);
      ctx.status(302); // redirected
      ctx.redirect("/tictactoe.html?p=2");
      sendGameBoardToAllPlayers(gson.toJson(gameboard));
    });
    
    // movement
    app.post("/move/:playerId", ctx -> {
      int id = Integer.parseInt(ctx.pathParam("playerId"));
      String str = ctx.body();
      int x = Character.getNumericValue(str.charAt(2));
      int y = Character.getNumericValue(str.charAt(6));
      Move move;
      if (id == 1) {
        move = new Move(p1, x, y);
      } else {
        move = new Move(p2, x, y);
      }
      String message = gameboard.validMove(move);
      System.out.println(message);
      if (message != "") {
        Message mes = new Message(false, 100, message);
        ctx.result(gson.toJson(mes));
      } else {
        // make movement
        gameboard.makeMovement(move);
        Message mes = new Message(true, 100, "");
        ctx.result(gson.toJson(mes));
      }
      System.out.println(gameboard);
      sendGameBoardToAllPlayers(gson.toJson(gameboard));
    });

    // Web sockets - DO NOT DELETE or CHANGE
    app.ws("/gameboard", new UiWebSocket());
  }

  /** Send message to all players.
   * @param gameBoardJson Gameboard JSON
   * @throws IOException Websocket message send IO Exception
   */
  private static void sendGameBoardToAllPlayers(final String gameBoardJson) {
    Queue<Session> sessions = UiWebSocket.getSessions();
    for (Session sessionPlayer : sessions) {
      try {
        sessionPlayer.getRemote().sendString(gameBoardJson);
      } catch (IOException e) {
        // Add logger here
      }
    }
  }

  public static void stop() {
    app.stop();
  }
}
package controllers;

import io.javalin.websocket.WsCloseContext;
import io.javalin.websocket.WsCloseHandler;
import io.javalin.websocket.WsConnectContext;
import io.javalin.websocket.WsConnectHandler;
import io.javalin.websocket.WsHandler;
import java.util.Queue;
import java.util.concurrent.ConcurrentLinkedQueue;
import java.util.function.Consumer;
import org.eclipse.jetty.websocket.api.Session;

/** Web socket class: DO NOT MODIFY.
 * @author Shirish Singh
 *
 */
public class UiWebSocket implements Consumer<WsHandler>  {

  // Store sessions to broadcast a message to all users
  private static final Queue<Session> SESSIONS = new ConcurrentLinkedQueue<>();

  @Override
  public void accept(final WsHandler t) {

    // On Connect
    t.onConnect(new WsConnectHandler() {

      @Override
      public void handleConnect(final WsConnectContext ctx) throws Exception {
        // TODO Auto-generated method stub
        SESSIONS.add(ctx.session);
      }

    });

    // On Close
    t.onClose(new WsCloseHandler() {

      @Override
      public void handleClose(final WsCloseContext ctx) throws Exception {
        SESSIONS.remove(ctx.session);
      }
    });
  }

  public static Queue<Session> getSessions() {
    return SESSIONS;
  }

}
package models;

public class GameBoard {

  private Player p1;

  private Player p2;

  private boolean gameStarted;

  private int turn;

  private char[][] boardState;

  private int winner;

  private boolean isDraw;
  
  /**.
   * check and update private member
   * if any line of column or diagonal is of one type
   * then one user wins;
   * .
   * if all spaces are occupied
   * then it is a draw
   */
  private void update() {
    for (int i = 0; i < 3; i++) {
      if (boardState[i][0] == boardState[i][1] 
          && boardState[i][1] == boardState[i][2] 
          && boardState[i][0] != '\u0000') {
        if (p1.getType() == boardState[i][0]) {
          this.winner = 1;
        } else {
          this.winner = 2;
        }
      }
    }
    
    for (int i = 0; i < 3; i++) {
      if (boardState[0][i] == boardState[1][i] 
          && boardState[1][i] == boardState[2][i]
          && boardState[0][i] != '\u0000') {
        if (p1.getType() == boardState[0][i]) {
          this.winner = 1;
        } else {
          this.winner = 2;
        }
      }
    }
    
    if (boardState[0][0] == boardState[1][1] 
        && boardState[1][1] == boardState[2][2]
        && boardState[1][1] != '\u0000') {
      if (p1.getType() == boardState[1][1]) {
        this.winner = 1;
      } else {
        this.winner = 2;
      }      
    }
    
    if (boardState[2][0] == boardState[1][1] 
        && boardState[1][1] == boardState[0][2]
        && boardState[1][1] != '\u0000') {
      if (p1.getType() == boardState[1][1]) {
        this.winner = 1;
      } else {
        this.winner = 2;
      }      
    }
    
    if (this.winner != 0) {
      // no need to continue to check draw
      return;
    }
    
    this.isDraw = true;
    for (int i = 0; i < 3; i++) {
      for (int j = 0; j < 3; j++) {
        if (boardState[i][j] == '\u0000') {
          this.isDraw = false;
        }
      }
    }
    
  }
  
  /** class constructor.
   * set the turn to 1
   * initialize the board
   * and set all the private member to
   * original values
   */
  public GameBoard() {
    this.turn = 1;
    this.boardState = new char[][] {
      {'\u0000', '\u0000', '\u0000'},
      {'\u0000', '\u0000', '\u0000'},
      {'\u0000', '\u0000', '\u0000'}
    };
    this.winner = 0;
    this.gameStarted = false;
    this.isDraw = false;
  }
  
  /**
   * valid move check.
   * check valid move from move object
   * if id is not the turn 
   * or boardState[x][y] is occupied
   * return corresponding message
   * if the message  
   */
  public String validMove(Move move) {
    int id = move.getPlayerID();
    int x = move.getX();
    int y = move.getY();
    String message = "";
    if (id != this.turn) {
      message = "Not your turn!";
    } else if (boardState[x][y] != '\u0000') {
      message = "This cell has been occupied";
    }
    return message;
  }

  
  /**.
   * @param move includes player and cell intended
   */
  public void makeMovement(Move move) {
    /*
     * check if the game ends as well
     * */
    int id = move.getPlayerID();
    char type = move.getPlayerType();
    int x = move.getX();
    int y = move.getY();
    
    if (id == 1) {
      this.turn = 2;
    } else {
      this.turn = 1;
    }
    
    this.boardState[x][y] = type;
    update();
  }
  
  /** set the player 1 in board.*/
  public void setPlayer1(Player p) {
    this.p1 = p;
  }
  
  /** set the player 2 and change the turn to 1.*/
  public void setPlayer2(Player p) {
    this.p2 = p;
    // when p2 is in, game starts
    this.gameStarted = true;
  }
}
package models;

public class Message {

  private boolean moveValidity;

  private int code;

  private String message;

  /**.
   * @param valid if it is a valid movement
   * @param c the code, which is usually 100
   * @param m the message wants to show
   */
  public Message(boolean valid, int c, String m) {
    this.moveValidity = valid;
    this.code = c;
    this.message = m;
  }
}
package models;

public class Move {

  private Player player;

  private int moveX;

  private int moveY;
  
  /**.
   * @param p the player who makes the movement
   * @param x the x coordinate to place piece
   * @param y the y coordinate to place the piece
   */
  public Move(Player p, int x, int y) {
    this.player = p;
    this.moveX = x;
    this.moveY = y;
  }
  
  /** get the x coordinate.*/
  int getX() {
    return moveX;
  }
  
  /** get the y coordinate.*/
  int getY() {
    return moveY;
  }
  
  /** get the player ID for the movement.*/
  int getPlayerID() {
    return player.getID();
  }

  /** get the player piece type for this movement.*/
  char getPlayerType() {
    return player.getType();
  }
}
package models;

public class Player {

  private char type;

  private int id;
  
  
  /** class constructor.
   * @param ptype X or O based on player selection
   * @param pid player ID
   */
  public Player(char ptype, int pid) {
    this.type = ptype;
    this.id = pid;
  }
  
  /**.
   * @return user piece selection
   */
  public char getType() {
    return this.type;
  }
  
  
  /**.
   * @return user ID
   */
  public int getID() {
    return this.id;
  }
}
