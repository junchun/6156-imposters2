package controllers;

import java.io.IOException;
import io.javalin.Javalin;
import java.util.Queue;

import models.GameBoard;
import models.Message;
import models.Move;
import models.Player;

import org.eclipse.jetty.websocket.api.Session;

class PlayGame {

  /**
   * the port this game is hosted on.
   */
  private static final int PORT_NUMBER = 8080;

  /**
   * the location of the X coordinate in move message.
   */
  private static final int X_LOCATION = 2;
  
  /**
   * the location of the y coordinate in move message.
   */
  private static final int Y_LOCATION = 6;
  
  /**
   * the default value for code in response message.
   */
  private static final int CODE = 100;
  
  /**
   * the interface.
   */
  private static Javalin app;

  /** Main method of the application.
   * @param args Command line arguments
   */
  public static void main(final String[] args) {

    app = Javalin.create(config -> {
      config.addStaticFiles("/public");
    }).start(PORT_NUMBER);

    
    /*
     * 
     * Redirect to tictactoe for GET request 
     */
    app.get("/newgame", ctx -> {
    	ctx.redirect("/tictactoe.html");
    });
    
    /*
     * initialize the gameboard
     */
    GameBoard g = new GameBoard();

    
    /*
     * handle POST request for first player 
     */
    app.post("/startgame", ctx -> {
    	// initialize our gameboard with player 1
    	String type = ctx.body();
    	char t = 'O';
    	if (type.equals("type=X")) {
    		t = 'X';
    	} 
    	// set player 1 in our gameboard
    	g.setP1(new Player(t, 1));
    	
    	// send back json response
    	ctx.result(g.toJson());
    });
   
    /*
     * handle JoinGame GET request from second player
     */
    app.get("/joingame", ctx -> {
    	ctx.redirect("/tictactoe.html?p=2");
    	// set up player2 and update our gameboard
    	char p1Type = g.getP1().getType();
    	char tmp = 'O';
    	if (p1Type == 'O') {
    		tmp = 'X';
    	}
    	g.setP2(new Player(tmp, 2));
    	g.setGameStarted(true);
    	sendGameBoardToAllPlayers(g.toJson());
    });

    /*
     * update the gameboard if the given move is valid
     */
    app.post("/move/:playerId", ctx -> {
    	String player = ctx.pathParam("playerId");
    	int id = Integer.parseInt(player);

    	int x = Integer.parseInt(ctx.body().charAt(X_LOCATION) + "");
    	int y = Integer.parseInt(ctx.body().charAt(Y_LOCATION) + "");

    	Player p = ((id == 1) ? g.getP1() : g.getP2());
    	Move m = new Move(p, x, y);

    	// try to add move
    	Message msg;
    	if (g.addMove(m)) {
    		// added successfully
    		msg = new Message(true, CODE, "");
    	} else {
    		// move invalid
    		msg = new Message(false, CODE, "Move Invalid");
    	}
    	// send message
    	ctx.result(msg.getJson());
    	// update our gameboard
    	sendGameBoardToAllPlayers(g.toJson());
	
    });

    // Web sockets - DO NOT DELETE or CHANGE
    app.ws("/gameboard", new UiWebSocket());
  }

  /** Send message to all players.
   * @param gameBoardJson Gameboard JSON
   * @throws IOException Websocket message send IO Exception
   */
  private static void sendGameBoardToAllPlayers(final String gameBoardJson) {
    Queue<Session> sessions = UiWebSocket.getSessions();
    for (Session sessionPlayer : sessions) {
      try {
        sessionPlayer.getRemote().sendString(gameBoardJson);
      } catch (IOException e) {
        // Add logger here
    	System.out.println("something went wrong");
      }
    }
  }

  public static void stop() {
    app.stop();
  }
}
package controllers;

import io.javalin.websocket.WsCloseContext;
import io.javalin.websocket.WsCloseHandler;
import io.javalin.websocket.WsConnectContext;
import io.javalin.websocket.WsConnectHandler;
import io.javalin.websocket.WsHandler;
import java.util.Queue;
import java.util.concurrent.ConcurrentLinkedQueue;
import java.util.function.Consumer;
import org.eclipse.jetty.websocket.api.Session;

/** Web socket class: DO NOT MODIFY.
 * @author Shirish Singh
 *
 */
public class UiWebSocket implements Consumer<WsHandler>  {

  // Store sessions to broadcast a message to all users
  private static final Queue<Session> SESSIONS = new ConcurrentLinkedQueue<>();

  @Override
  public void accept(final WsHandler t) {

    // On Connect
    t.onConnect(new WsConnectHandler() {

      @Override
      public void handleConnect(final WsConnectContext ctx) throws Exception {
        // TODO Auto-generated method stub
        SESSIONS.add(ctx.session);
      }

    });

    // On Close
    t.onClose(new WsCloseHandler() {

      @Override
      public void handleClose(final WsCloseContext ctx) throws Exception {
        SESSIONS.remove(ctx.session);
      }
    });
  }

  public static Queue<Session> getSessions() {
    return SESSIONS;
  }

}
package models;

public class GameBoard {
  
  /**
   * the most total moves players can make on this game board.
   */
  static final int MAX_MOVES = 9; 
  
  /**
   * the length and width of this board.
   */
  static final int DIMENSION = 3;
  
  /**
   * the first player in this game.
   */
  private Player p1; 

  /**
   * the second player in this game.
   */
  private Player p2;

  /**
   * if the game started or not.
   */
  private boolean gameStarted;

  /**
   * the id of the player who plays this turn.
   */
  private int turn;

  /**
   * board status.
   */
  private char[][] boardState;

  /**
   * the id of the winner.
   */
  private int winner;

  /**
   * if the game is draw or not.
   */
  private boolean isDraw;
  
  /**
   * to keep track of total moves by all players.
   */
  private int moves;

  
  
  /**
   * construct a new gameboard and initialize the fields.
   */
  public GameBoard() {
    this.p1 = null;
    this.p2 = null;
    this.gameStarted = false;
    this.turn = 1;
    this.boardState = new char[DIMENSION][DIMENSION];
    this.winner = 0;
    this.isDraw = false;
    this.moves = 0;
  }
  
  // a set of getters 
  
  /**
   * 
   * @return the first player of this game.
   */
  public Player getP1() {
    return p1;
  }
  
  /**
   * 
   * @return the second player of this game.
   */
  public Player getP2() {
    return p2;
  }
  
  /**
   * 
   * @return if the game has started or not.
   */
  public boolean getGameStarted() {
    return this.gameStarted;
  }
  
  /**
   * 
   * @return the id of the player who plays this turn.
   */
  public int getTurn() {
    return this.turn;
  }
  
  /**
   * 
   * @return the game board status.
   */
  public char[][] getBoardState() {
    return this.boardState;
  }
  
  /**
   * 
   * @return the id of the winner.
   */
  public int getWinner() {
    return this.winner;
  }
  
  /**
   * 
   * @return if the game is a draw or not.
   */
  public boolean getIsDraw() {
    return this.isDraw;
  }
  
  
  // a set of setters 
  
  /**
   * set player 1 with the given player.
   * @param p the new player for 1st player
   */
  public void setP1(final Player p) {
    this.p1 = p;
  } 
  
  
  /**
   * set player 2 with the given player.
   * @param p the new player for 2nd player
   */
  public void setP2(final Player p) {
    this.p2 = p;
  }
  
  /**
   * set the status of the game(started or not).
   * @param t the new status
   */
  public void setGameStarted(final boolean t) {
    this.gameStarted = t;
  }
  
  /**
   * set the id of the player who should play this turn.
   * @param t the new assigned turn
   */
  public void setTurn(final int t) {
    this.turn = t;
  } 
  
  /**
   * set the game board status.
   * @param c the new status
   */
  public void boardState(final char[][] c) {
    this.boardState = c;
  } 
  
  /**
   * set the id of the winner.
   * @param winer the new winner of this game
   */
  public void setWinnder(final int winer) {
    this.winner = winer;
  }
  
  /**
   * set the draw status of this game.
   * @param t the new statuse for draw or not
   */
  public void setIsDraw(final boolean t) {
    this.isDraw = t;
  }
  
  
  
  /**
   * add move if the given move is valid.
   * @param m move by the player
   * @return true if move is added, false otherwise
   */
  public boolean addMove(final Move m) {
    // check if move is valid
    if (!this.checkMove(m)) {
      return false;
    }
    
    // add the move and return true
    int x = m.getMX();
    int y = m.getMY();
    
    this.boardState[x][y] = m.getPlayer().getType();
    // update turn 
    if (m.getPlayer().getId() == 1) {
      this.turn = 2;
    } else {
      this.turn = 1;
    }
    
    // update moves
    this.moves++;
    
    // check if we have a winner
    // update our gameboard if there is winner or draw 
    int winer = this.checkWinner();
    if (winer != -1) {
      this.winner = winer;
      return true;
    }
    
    // otherwise check isDraw
    if (this.moves == MAX_MOVES) {
      this.isDraw = true;
    }
    
    return true;
  }
  
  /**
   * check if this game has a winner.
   * @return the id of the winner, -1 if no winner 
   */
  public int checkWinner() {
    // check player 1
    if (this.checkChar(this.p1.getType())) {
      return this.p1.getId();
    }
    
    if (this.checkChar(this.p2.getType())) {
      return this.p2.getId();
    }
    
    return -1;
  }
  
  /**
   * helper method for check winner
   * check if the given char has 3 in a row, or column, or diagonal.
   * @pre the c must be X or O 
   * @param c the char we are checking 
   * @return true if the given c met the requirement, false otherwise
   */
  private boolean checkChar(final char c) {
    // check row
    for (int x = 0; x < DIMENSION; x++) {
      if ((this.boardState[x][0] == this.boardState[x][1])
      && (this.boardState[x][1] == this.boardState[x][2])
      && (this.boardState[x][2] == c)) {
        return true;
      } 
    }
    
    // check column 
    for (int y = 0; y < DIMENSION; y++) {
      if ((this.boardState[0][y] == this.boardState[1][y]) 
      && (this.boardState[1][y] == this.boardState[2][y])
      && (this.boardState[2][y] == c)) {
        return true;
      } 
    }
    
    // check diagonal
    if ((this.boardState[0][0] == this.boardState[1][1])
        && this.boardState[1][1] == this.boardState[2][2]
        && this.boardState[1][1] == c) {
      return true;
    }
    
    if ((this.boardState[0][2] == this.boardState[1][1])
        && this.boardState[1][1] == this.boardState[2][0]
        && this.boardState[1][1] == c) {
      return true;
    }
    
    // otherwise return false
    return false;
  }
  
 /**
  * check if the given move is valid for this gameboard.
  * @param m the move that player made 
  * @return true if the move is valid, false otherwise
  */
  private boolean checkMove(final Move m) {
    int mx = m.getMX();
    int my = m.getMY();
    Player p = m.getPlayer();
    
    // check if it is this player's turn
    if (p.getId() != this.turn) {
      return false;
    }
    
    char c = 'X';
    if (p.getId() == this.p1.getId()) {
      c = this.p1.getType();
    } else if (p.getId() == this.p2.getId()) {
      c = this.p2.getType();
    } else {
      // this player's id is invalid 
      return false;
    }
    
    // check if mx or my out of bound 
    if (mx < 0 || mx > 2 || my < 0 || my  > 2) {
      return false;
    }
    
    // check if the given coordinate has been taken
    if (this.boardState[mx][my] != '\u0000') {
      return false;
    }
   
    return true;
  }
  
  
  
  
  /**    
   * @return the information of Gameboard in Json format
   */
  public String toJson() {
    String res = "";
    
    res += "{";
    
    // players info
    if (this.p1 != null) {
    res += p1.toJson();
    res += ",";
    }
    
    if (this.p2 != null) {
      res += p2.toJson();
      res += ",";
    }
    
    // gameStarted 
    res += "\"gameStarted\": ";
    if (this.gameStarted) {
      res += "true";
    } else {
      res += "false";
    }
    res += ",";
    
    // turn
    res += "\"turn\": " + this.turn + ",";
    
    
    // board state
    res += "\"boardState\": [";
    
    for (int i = 0; i < DIMENSION; i++) {
      res += "[";
      for (int j = 0; j < DIMENSION; j++) {
        res += "\"";
        int state = (int) this.boardState[i][j];
        res += String.format("\\u%04x", state);
        res += "\"";
        if (j != 2) {
          res += ",";
        }
      }
      res += "]";
      if (i != 2) {
        res += ",";
      }
    }
    
    res += "],";
    
    // winner
    res += "\"winner\": " + this.winner + ",";
    // isDraw
    res += "\"isDraw\": ";
    if (this.isDraw) {
      res += "true";
    } else {
      res += "false";
    }
    
    
    res += "}";

    return res;
  }
}
package models;

public class Message {

  /**
   * the validity of the move.
   */
  private boolean moveValidity;

  /**
   * the code of this message.
   */
  private int code;

  /**
   * the message content.
   */
  private String message;

  /**
   * construct a new message. 
   * @param m the validity of some move
   * @param newCode the message code 
   * @param msg the content of the message
   */
  public Message(final boolean m, final int newCode, final String msg) {
    this.moveValidity = m;
    this.code = newCode;
    this.message = msg;
  }
  
  
  // a set of getters
  
  /**
   * 
   * @return if the associated move with this message
   *        is valid or not
   */
  public boolean getMoveValidity() {
    return this.moveValidity;
  }
  
  /**
   * 
   * @return the message code
   */
  public int getCode() {
    return this.code;
  }
  
  /**
   * 
   * @return the content of the message
   */
  public String getMessage() {
    return this.message;
  }
  
  // a set of setters
  
  /**
   * reset the validity of some move with the given boolean.
   * @param m the new validity
   */
  public void setMoveValidity(final boolean m) {
    this.moveValidity = m;
  }
  
  /**
   * reset the message code.
   * @param c the new message code
   */
  public void setCode(final int c) {
    this.code = c;
  }
  
  /**
   * reset the new message.
   * @param msg the new message content
   */
  public void setMessage(final String msg) {
    this.message = msg;
  }
  
  /**
   * 
   * @return the json msg of this message
   */
  public String getJson() {
    return "{\"moveValidity\": " + this.moveValidity + ", \"code\": " 
        + this.code + ", \"message\": \""
        + this.message + "\"}";
  }
}
package models;

public class Move {

  /**
   * the player who makes this move.
   */
  private Player player;

  /**
   * the x coordinate of this move.
   */
  private int moveX;

  /**
   * the y coordinate of this move.
   */
  private int moveY;

  /**
   * Construct a Move of player p with given x and y coordinate 
   * in the gameboard.
   * @param p the player who plays the move 
   * @param mx the x coordinate of this move on gameboard
   * @param my the y coordinate of this move on gameboard
   */
  public Move(final Player p, final int mx, final int my) {
    this.player = p;
    this.moveX = mx;
    this.moveY = my;
  }
  
  // a set of getters 
  
  /**
   * @return the player who made this moves
   */
  public Player getPlayer() {
    return this.player;
  }
  
  /**
   * 
   * @return the x coordinate on gameboard of this move
   */
  public int getMX() {
    return this.moveX;
  }
  
  /**
   * 
   * @return the y coordinate on gameboard of this move
   */
  public int getMY() {
    return this.moveY;
  }
  
  // a set of setters
  
  /**
   * Reset this move's player with the given player.
   * @param p the player who needs to be assigned to this move
   */
  public void setPlayer(final Player p) {
    this.player = p;
  }
  
  /**
   * reset the x coordinate of this move with the given mx.
   * @param mx the new x coordinate of this move
   */
  public void setMX(final int mx) {
    this.moveX = mx;
  }
  
  /**
   * reset the y coordinate of this move with the given my.
   * @param my the new y coordinate of this move
   */
  public void setMY(final int my) {
    this.moveY = my;
  }
  
  
}
package models;

public class Player {

  /**
   * the type X or O of this player.
   */
  private char type;

  /**
   * the id of this player.
   */
  private int id;
  
  /**
   * Create a player with the given type and ID.
   * @param newType the type of the player
   * @param identity the id of the player 
   */
  public Player(final char newType, final int identity) {
    this.type = newType;
    this.id = identity;
  }
  
  // a set of getters 
  
  /**
   * Getter for type.
   * @return the type of this player
   */
  public char getType() {
    return this.type;
  }
  
  /**
   * Getter for ID.
   * @return the id of the player
   */
  public int getId() {
    return this.id;
  }
  
  // a set of setters

  /**
   * Reset this player's type with the given type.
   * @param newType the type that needs to be set to this player
   */
  public void setType(final char newType) {
    this.type = newType;
  }
  
  /**
   * Reset this player's id with the given id.
   * @param identity the id that needs to be assigned to this player
   */
  public void setId(final int identity) {
    this.id = identity;
  }
  
  
  /**
   * 
   * @return this player object in Json format
   */
  public String toJson() {
    String res = "";
      res += "\"p" + id + "\"";
    res += ": {\n";
    res += "\t\"type\": " + "\"" + type + "\"" + ","; 
    res += "\t\"id\": " + id; 
    res += "}";
    
    return res;
  }

}
