package controllers;

import com.google.gson.Gson;
import io.javalin.Javalin;
import java.io.IOException;
import java.util.Queue;

import models.GameBoard;
import models.Message;
import models.Player;
import org.eclipse.jetty.websocket.api.Session;

class PlayGame {
  private static GameBoard gameBoard;

  private static final int PORT_NUMBER = 8080;

  private static Javalin app;

  /** Main method of the application.
   * @param args Command line arguments
   */
  public static void main(final String[] args) {

    app = Javalin.create(config -> {
      config.addStaticFiles("/public");
    }).start(PORT_NUMBER);

    // Test Echo Server
    app.post("/echo", ctx -> {
      ctx.result(ctx.body());
    });

    app.get("/newgame", ctx -> {
      gameBoard = new GameBoard();
      ctx.redirect("/tictactoe.html");
    });

    app.post("/startgame", ctx -> {
      try {
        String type = ctx.req.getParameter("type");

        // We only accept X or O as "type".
        if (type.length() != 1) {
          ctx.status(400);
        }
        if (type.charAt(0) != 'X' && type.charAt(0) != 'O') {
          ctx.status(400);
        }
        if (gameBoard == null) {
          ctx.status(404);
        }

        gameBoard.getP1().setType(type.charAt(0));
        gameBoard.setGameStarted(true);

        Gson gson = new Gson();
        String jsonStr = gson.toJson(gameBoard);
        ctx.result(jsonStr);
      } catch (Exception e) {
        ctx.status(400);
        System.out.print(e.getMessage());
      }
    });

    app.get("/joingame", ctx -> {
      if (gameBoard == null) {
        ctx.status(404);
        return;
      }

      // If player 1 has not chosen a "type", then no one can join the game.
      if (gameBoard.getP1().getType() == 0) {
        ctx.status(400);
        return;
      }

      if (gameBoard.getP2() != null) {
        // Someone has already joined the game.
        ctx.status(409);
        return;
      }

      Player p2 = new Player();
      p2.setId(2);

      if (gameBoard.getP1().getType() == 'X') {
        p2.setType('O');
      } else {
        p2.setType('X');
      }

      gameBoard.setP2(p2);
      Gson gson = new Gson();
      String jsonStr = gson.toJson(gameBoard);
      sendGameBoardToAllPlayers(jsonStr);

      ctx.redirect("/tictactoe.html?p=2");
    });

    app.post("/move/:playerId", ctx -> {
      if (gameBoard == null) {
        ctx.status(404);
        return;
      }

      try {
        int playerId = ctx.pathParam("playerId", Integer.class).get();
        int x = ctx.formParam("x", Integer.class).get();
        int y = ctx.formParam("y", Integer.class).get();

        Message msg = gameBoard.makeMove(playerId, x, y);

        Gson gson = new Gson();
        String msgJsonStr = gson.toJson(msg);
        ctx.result(msgJsonStr);

        gameBoard.updateWinner();

        String gameBoardJsonStr = gson.toJson(gameBoard);
        sendGameBoardToAllPlayers(gameBoardJsonStr);
      } catch (Exception e) {
        ctx.status(400);
        System.out.print(e.getMessage());
      }
    });

    // Web sockets - DO NOT DELETE or CHANGE
    app.ws("/gameboard", new UiWebSocket());
  }

  /** Send message to all players.
   * @param gameBoardJson Gameboard JSON
   * @throws IOException Websocket message send IO Exception
   */
  private static void sendGameBoardToAllPlayers(final String gameBoardJson) {
    Queue<Session> sessions = UiWebSocket.getSessions();
    for (Session sessionPlayer : sessions) {
      try {
        sessionPlayer.getRemote().sendString(gameBoardJson);
      } catch (IOException e) {
        // Add logger here
      }
    }
  }

  public static void stop() {
    app.stop();
  }
}

package controllers;

import io.javalin.websocket.WsCloseContext;
import io.javalin.websocket.WsCloseHandler;
import io.javalin.websocket.WsConnectContext;
import io.javalin.websocket.WsConnectHandler;
import io.javalin.websocket.WsHandler;
import java.util.Queue;
import java.util.concurrent.ConcurrentLinkedQueue;
import java.util.function.Consumer;
import org.eclipse.jetty.websocket.api.Session;

/** Web socket class: DO NOT MODIFY.
 * @author Shirish Singh
 *
 */
public class UiWebSocket implements Consumer<WsHandler>  {

  // Store sessions to broadcast a message to all users
  private static final Queue<Session> SESSIONS = new ConcurrentLinkedQueue<>();

  @Override
  public void accept(final WsHandler t) {

    // On Connect
    t.onConnect(new WsConnectHandler() {

      @Override
      public void handleConnect(final WsConnectContext ctx) throws Exception {
        // TODO Auto-generated method stub
        SESSIONS.add(ctx.session);
      }

    });

    // On Close
    t.onClose(new WsCloseHandler() {

      @Override
      public void handleClose(final WsCloseContext ctx) throws Exception {
        SESSIONS.remove(ctx.session);
      }
    });
  }

  public static Queue<Session> getSessions() {
    return SESSIONS;
  }

}
package models;

public class GameBoard {

  private Player p1;

  private Player p2;

  private boolean gameStarted;

  private int turn;

  private char[][] boardState;

  private int winner;

  private boolean isDraw;

  public GameBoard() {
    p1 = new Player();
    p1.setId(1);

    gameStarted = false;
    turn = 1;
    boardState = new char[][] {{0, 0, 0}, {0, 0, 0}, {0, 0, 0}};
    winner = 0;
    isDraw = false;
  }

  public Message makeMove(int playerId, int x, int y) {
    Message ret = new Message();

    // Check if any player is uninitialized.
    if (p1.getType() == 0 || p2.getType() == 0) {
      ret.setCode(400);
      ret.setMoveValidity(false);
      ret.setMessage("Game not ready");
      return ret;
    }

    // Check if it's the player's turn.
    if (turn != playerId) {
      ret.setCode(400);
      ret.setMoveValidity(false);
      ret.setMessage("Not your turn");
      return ret;
    }

    if (x < 0 || x > 2 || y < 0 || y > 2) {
      ret.setCode(400);
      ret.setMoveValidity(false);
      ret.setMessage("Invalid coordinates");
      return ret;
    }

    if (boardState[x][y] != 0) {
      ret.setCode(400);
      ret.setMoveValidity(false);
      ret.setMessage("Place already taken");
      return ret;
    }

    char type;
    if (playerId == 1) {
      type = p1.getType();
    } else if (playerId == 2) {
      type = p2.getType();
    } else {
      ret.setCode(400);
      ret.setMoveValidity(false);
      ret.setMessage("Invalid player ID");
      return ret;
    }

    boardState[x][y] = type;
    if (playerId == 1) {
      turn = 2;
    } else {
      turn = 1;
    }

    ret.setCode(100);
    ret.setMoveValidity(true);
    ret.setMessage("");
    return ret;
  }

  public void updateWinner() {
    // Check all rows.
    for (int i = 0; i < 3; i++) {
      int sum = 0;
      for (int j = 0; j < 3; j++) {
        if (boardState[i][j] == p1.getType()) {
          sum++;
        } else if (boardState[i][j] == p2.getType()) {
          sum--;
        }
      }

      if (sum == 3) {
        winner = 1;
        return;
      } else if (sum == -3) {
        winner = 2;
        return;
      }
    }


    // Check all columns.
    for (int j = 0; j < 3; j++) {
      int sum = 0;
      for (int i = 0; i < 3; i++) {
        if (boardState[i][j] == p1.getType()) {
          sum++;
        } else if (boardState[i][j] == p2.getType()) {
          sum--;
        }
      }

      if (sum == 3) {
        winner = 1;
        return;
      } else if (sum == -3) {
        winner = 2;
        return;
      }
    }


    int sum = 0;
    // Check the diagonal.
    for (int i = 0; i < 3; i++) {
      if (boardState[i][i] == p1.getType()) {
        sum++;
      } else if (boardState[i][i] == p2.getType()) {
        sum--;
      }
    }

    if (sum == 3) {
      winner = 1;
      return;
    } else if (sum == -3) {
      winner = 2;
      return;
    }

    sum = 0;
    // Check the antidiagonal.
    for (int i = 0; i < 3; i++) {
      if (boardState[i][2-i] == p1.getType()) {
        sum++;
      } else if (boardState[i][2-i] == p2.getType()) {
        sum--;
      }
    }

    if (sum == 3) {
      winner = 1;
      return;
    } else if (sum == -3) {
      winner = 2;
      return;
    }

    sum = 0;
    for (int i = 0; i < 3; i++) {
      for (int j = 0; j < 3; j++) {
        if (boardState[i][j] != 0) {
          sum++;
        }
      }
    }

    if (sum == 9) {
      isDraw = true;
    }
  }

  public Player getP1() {
    return p1;
  }

  public void setP1(Player p1) {
    this.p1 = p1;
  }

  public Player getP2() {
    return p2;
  }

  public void setP2(Player p2) {
    this.p2 = p2;
  }

  public boolean isGameStarted() {
    return gameStarted;
  }

  public void setGameStarted(boolean gameStarted) {
    this.gameStarted = gameStarted;
  }

  public int getTurn() {
    return turn;
  }

  public void setTurn(int turn) {
    this.turn = turn;
  }

  public char[][] getBoardState() {
    return boardState;
  }

  public void setBoardState(char[][] boardState) {
    this.boardState = boardState;
  }

  public int getWinner() {
    return winner;
  }

  public void setWinner(int winner) {
    this.winner = winner;
  }

  public boolean isDraw() {
    return isDraw;
  }

  public void setDraw(boolean draw) {
    isDraw = draw;
  }
}
package models;

public class Message {
  private boolean moveValidity;

  private int code;

  private String message;

  public boolean isMoveValidity() {
    return moveValidity;
  }

  public void setMoveValidity(boolean moveValidity) {
    this.moveValidity = moveValidity;
  }

  public int getCode() {
    return code;
  }

  public void setCode(int code) {
    this.code = code;
  }

  public String getMessage() {
    return message;
  }

  public void setMessage(String message) {
    this.message = message;
  }

}
package models;

public class Player {

  private char type;

  private int id;

  public char getType() {
    return type;
  }

  public void setType(char type) {
    this.type = type;
  }

  public int getId() {
    return id;
  }

  public void setId(int id) {
    this.id = id;
  }
}
package models;

public class Move {

  private Player player;

  private int moveX;

  private int moveY;

}
