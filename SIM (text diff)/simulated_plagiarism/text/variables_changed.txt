package controllers;

import com.google.gson.Gson;
import io.javalin.Javalin;
import java.io.IOException;
import java.util.Queue;
import models.GameBoard;
import models.Message;
import models.Move;
import models.Player;
import org.eclipse.jetty.websocket.api.Session;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

class PlayGame {

  private static final int PORT_NUMBER = 8080;

  private static Javalin app;
  
  private static GameBoard e;
  
  private static Player p1;
  
  private static Player p2;

  /** Main method of the application.
   * @param args Command line arguments
   */
  public static void main(final String[] args) {

    app = Javalin.create(config -> {
      config.addStaticFiles("/public");
    }).start(PORT_NUMBER);

    // Test Echo Server
    app.post("/echo", ctx -> {
      ctx.result(ctx.body());
    });

    app.get("/newgame", ctx -> {
        ctx.redirect("/tictactoe.html");
      });
      
      app.post("/startgame", ctx -> {
        String rq = ctx.body();
              
        e = new GameBoard();
        char tt = rq.charAt(rq.indexOf("type=") + "type=".length());
        p1 = new Player();
        p1.changeTheId(1);
        p1.changePlayerType(tt);
        
        e.makeIt1st(p1);
        
        Gson bbb = new Gson();
        ctx.result(bbb.toJson(e));
      });
      
      app.get("/joingame", ctx -> {
        ctx.redirect("/tictactoe.html?p=2");
        
        char ptt = p1.retrievePlayerType() == 'O' ? 'X' : 'O';
        
        p2 = new Player();
        p2.changeTheId(2);
        p2.changePlayerType(ptt);
        
        e.makeIt2nd(p2);
        e.asdgasg(true);
        
        Gson dd = new Gson();
        sendGameBoardToAllPlayers(dd.toJson(e));
      });
      
      app.post("/move/:playerId", ctx -> {
        String rb = ctx.body();
        String playerId = ctx.pathParam("playerId");
        Player player;
        Move m = new Move();
        if (playerId.equals("1")) {
          player = p1;
        } else {
          player = p1;
        }
        int moveX = Character.getNumericValue(
                rb.charAt(rb.indexOf("x=") + "x=".length()));
        int moveY = Character.getNumericValue(
                rb.charAt(rb.indexOf("y=") + "y=".length()));
        m.whoBePlaying(player);
        m.whatWasTheMoveX(moveX);
        m.whatWasTheMoveY(moveY);
        
        Message kk = new Message();
        kk.makeItValid(e.mmvvvv113(m) == 1);
        kk.changeStatus(100);
        if (e.mmvvvv113(m) == 0) {
          kk.setMessage("Invalid move!");
        } else {
          if (e.ssmmmm113(m) == 1) {
            if (e.didanyonewin() == 1) {
              kk.setMessage("The game is a draw!");
            } else {
              int w = e.gwwwggww();
              kk.setMessage(String.format("Player %d won!", w));
            }
          } else {
            kk.setMessage("");
          }
        }
        
        Gson dd = new Gson();
        ctx.result(dd.toJson(kk));
        sendGameBoardToAllPlayers(dd.toJson(e));
      });
      // TODO complete

    // Web sockets - DO NOT DELETE or CHANGE
    app.ws("/gameboard", new UiWebSocket());
  }

  /** Send message to all players.
   * @param gameBoardJson Gameboard JSON
   * @throws IOException Websocket message send IO Exception
   */
  private static void sendGameBoardToAllPlayers(final String gameBoardJson) {
    Queue<Session> sessions = UiWebSocket.getSessions();
    for (Session sessionPlayer : sessions) {
      try {
        sessionPlayer.getRemote().sendString(gameBoardJson);
      } catch (IOException e) {
        // Add logger here
      }
    }
  }

  public static void stop() {
    app.stop();
  }
}
package controllers;

import io.javalin.websocket.WsCloseContext;
import io.javalin.websocket.WsCloseHandler;
import io.javalin.websocket.WsConnectContext;
import io.javalin.websocket.WsConnectHandler;
import io.javalin.websocket.WsHandler;
import java.util.Queue;
import java.util.concurrent.ConcurrentLinkedQueue;
import java.util.function.Consumer;
import org.eclipse.jetty.websocket.api.Session;

/** Web socket class: DO NOT MODIFY.
 * @author Shirish Singh
 *
 */
public class UiWebSocket implements Consumer<WsHandler>  {

  // Store sessions to broadcast a message to all users
  private static final Queue<Session> SESSIONS = new ConcurrentLinkedQueue<>();

  @Override
  public void accept(final WsHandler t) {

    // On Connect
    t.onConnect(new WsConnectHandler() {

      @Override
      public void handleConnect(final WsConnectContext ctx) throws Exception {
        // TODO Auto-generated method stub
        SESSIONS.add(ctx.session);
      }

    });

    // On Close
    t.onClose(new WsCloseHandler() {

      @Override
      public void handleClose(final WsCloseContext ctx) throws Exception {
        SESSIONS.remove(ctx.session);
      }
    });
  }

  public static Queue<Session> getSessions() {
    return SESSIONS;
  }

}
package models;

public class GameBoard {

  private Player p1;

  private Player p2;

  private boolean gameStarted;

  private int turn;

  private char[][] boardState;

  private int winner;

  private boolean isDraw;


  /**
   * Constructor for GameBoard.
   */
  public GameBoard() {
    p1 = null;
    p2 = null;
    gameStarted = false;
    turn = 1;
    
    // fill the 3 by 3 board with the default value
    boardState = new char[3][3];
    for (char[] array : boardState) {
      for (int i = 0; i < array.length; i++) {
        array[i] = '0';
      }
    }
    winner = 0;
    isDraw = false;
  }
  
  /**
   * Get player 1.
   * @return player 1
   */
  public Player whereIs1st() {
    return p1;
  }

  /**
   * Set player 1.
   * @param p1 player 1
   */
  public int makeIt1st(Player im1) {
    this.p1 = im1;
    return 0;
  }

  /**
   * Get player 2.
   * @return player 2
   */
  public Player whereIs2nd() {
    return p2;
  }

  /**
   * Set player 2.
   * @param p2 player 2
   */
  public int makeIt2nd(Player bb) {
    this.p2 = bb;
    return 0;
  }

  /**
   * Check if the game has started.
   * @return true if game has started
   */
  public int startedOrNot() {
    if (this.gameStarted)
    return 1;
    return 0;
  }

  /**
   * Set game status to started.
   * @param gameStarted game status
   */
  public int asdgasg(boolean dd) {
    this.gameStarted = dd;
    return 0;
  }

  /**
   * Get play turn.
   * @return play turn
   */
  public int iiiee() {
    return turn;
  }

  /**
   * Set play turn.
   * @param turn play turn to set
   */
  public int ssttt(int tt) {
    this.turn = tt;
    return 0;
  }

  /**
   * Get board status.
   * @return the board state
   */
  public char[][] ggeeee() {
    return boardState;
  }

  /**
   * Set board status.
   * @param boardState the board state to set
   */
  public int sbssss(char[][] eee) {
    this.boardState = eee;
    return 0;
  }

  /**
   * Get game winner.
   * @return winning player
   */
  public int gwwwggww() {
    return this.winner;
  }

  /**
   * Set game winner.
   * @param winner winning player
   */
  public int sswwwww(int ww) {
    this.winner = ww;
    return 0;
  }

  /**
   * Get game drawn status.
   * @return true if the game is tied
   */
  public int didanyonewin() {
  if (isDraw)
    return 1;
  return 0;
  }

  /**
   * Set game draw status.
   * @param isDraw game draw status 
   */
  public int setItTie(boolean ddd) {
    this.isDraw = ddd;
    return 0;
  }

  /**
   * Check if the move is valid or not.
   * If invalid, a message appears to the players.
   * @param move player move
   * @return false if the move is invalid
   */
  public int mmvvvv113(Move move) {
    char[][] board = ggeeee();
    if (iiiee() != move.getHimHere().whatsTheId() 
        || board[move.whatsTheNextMoveX()][move.whatsTheNextMoveY()] != '0') {
      return 0;
    }
    return 1;
  }
  
  /**
   * Set a valid move and update overall game status.
   * Should be used after isMoveValid() method to check if the move is valid.
   * @param move move
   * @return true if the game is over
   */
  public int ssmmmm113(Move move) {
    char[][] board = ggeeee();
    board[move.whatsTheNextMoveX()][move.whatsTheNextMoveY()] = move.getHimHere().retrievePlayerType();
    if (iiiee() == 1) {
      ssttt(2);
    } else {
      ssttt(1);
    }
    return ccooss444(board, move);
  }
  
  /**
   * Check if the game has concluded.
   * Update winner and isDraw if the game is over.
   * @param gameBoard game board
   * @param move player move
   * @return true if the game is over
   */
  private int ccooss444(char[][] e, Move move) {
    char type = move.getHimHere().retrievePlayerType();
    if (type == e[move.whatsTheNextMoveX()][0]
        && e[move.whatsTheNextMoveX()][0] == e[move.whatsTheNextMoveX()][1]
        && e[move.whatsTheNextMoveX()][1] == e[move.whatsTheNextMoveX()][2]) {
      winner = move.getHimHere().whatsTheId();
    } else if (type == e[0][move.whatsTheNextMoveY()]
          && e[0][move.whatsTheNextMoveY()] == e[1][move.whatsTheNextMoveY()]
          && e[1][move.whatsTheNextMoveY()] == e[2][move.whatsTheNextMoveY()]) {
      winner = move.getHimHere().whatsTheId();
    } else if (diagonalOrWhat(move) == 1) {
      if (move.getHimHere().retrievePlayerType() == e[0][0]
          && e[0][0] == e[1][1]
          && e[1][1] == e[2][2]) {
        winner = move.getHimHere().whatsTheId();
      } else if (move.getHimHere().retrievePlayerType() == e[0][2]
          && e[0][2] == e[1][1]
          && e[1][1] == e[2][0]) {
        winner = move.getHimHere().whatsTheId();
      }
    }
    
    isDraw = false;
    if (ccffdraw(e) == 1)
      isDraw = true;
    if (gwwwggww() != 0 || isDraw) {
      return 1;
    }
    
    return 0;
  }
  
  /**
   * Check if the move is made to a diagonal line cell.
   * @param move player move
   * @return true if the move is on a diagonal line
   */
  private int diagonalOrWhat(Move v) {
    if ((v.whatsTheNextMoveX() == 0 && v.whatsTheNextMoveY() == 0)
        || (v.whatsTheNextMoveX() == 1 && v.whatsTheNextMoveY() == 1)
        || (v.whatsTheNextMoveX() == 2 && v.whatsTheNextMoveY() == 2)
        || (v.whatsTheNextMoveX() == 2 && v.whatsTheNextMoveY() == 0)
        || (v.whatsTheNextMoveX() == 0 && v.whatsTheNextMoveY() == 2)) {
      return 1;
    }
    return 0;
  }
  
  /**
   * Check if there is any default value left on the board.
   * If there is no default value, then the game is over and it's a draw.
   * @param gameBoard game board
   * @return true if the game is a draw
   */
  private int ccffdraw(char[][] eee) {
    for (int k = 0; k < eee.length; k++) {
      for (int p = 0; p < eee[0].length; p++) {
        if (eee[k][p] == '0') {
          return 0;
        }
      }
    }
    return 1;
  }
  
}

package models;

public class Message {

  private boolean moveValidity;

  private int code;

  private String message;

  public int isItValid() {
    if (this.moveValidity)
      return 1;
    return 0;
  }

  /**
   * set moveValidity.
   * @param moveValidity true if move is valid
   */
  public int makeItValid(boolean validYes) {
    this.moveValidity = validYes;
    return 0;
  }
  
  /**
   * Get HTTP code.
   * @return HTTP status code
   */
  public float retrieveStatus() {
    return code;
  }
  
  /**
   * Set HTTP code.
   * @param code HTTP status code
   */
  public int changeStatus(int status) {
    this.code = status;
    return 0;
  }
  
  /**
   * Get message.
   * @return message
   */
  public String whatIsTheMsg() {
    return message;
  }
  
  /**
   * Set message.
    * @param message message
    */
  public int setMessage(String text) {
    this.message = text;
    return 0;
  }
}
package models;

public class Move {

  private Player player;

  private int moveX;

  private int moveY;

  /**
   * Get player making the move.
   * @return player
   */
  public Player getHimHere() {
    return player;
  }

  /**
   * Set player making the move.
   * @param player the player to make the move
   */
  public int whoBePlaying(Player human) {
    this.player = human;
    return 0;
  }

  /**
   * Get x coordinate move location.
   * @return x coordinate move location
   */
  public int whatsTheNextMoveX() {
    return moveX;
  }

  /**
   * Set x coordinate move location.
   * @param moveX x coordinate move location
   */
  public int whatWasTheMoveX(int xxxx) {
    this.moveX = xxxx;
    return 0;
  }

  /**
   * Get y coordinate move location.
   * @return y coordinate move location
   */
  public int whatsTheNextMoveY() {
    return moveY;
  }

  /**
   * Set y coordinate move location.
   * @param moveY y coordinate move location
   */
  public int whatWasTheMoveY(int yyyy) {
    this.moveY = yyyy;
    return 0;
  }
}
package models;

public class Player {

  private char type;

  private int id;

  /**
   * Get player type (O/X).
   * @return player type
   */
  public char retrievePlayerType() {
    return type;
  }

  /**
   * Set player type (O/X).
   * @param type player type
   */
  public int changePlayerType(char tt) {
    this.type = tt;
    return 0;
  }

  /**
   * Get player id.
   * @return player id
   */
  public int whatsTheId() {
    return id;
  }

  /**
   * Set player id.
   * @param id player id
   */
  public int changeTheId(int dd) {
    this.id = dd;
    return 0;
  }
}
