package controllers;

import com.google.gson.Gson;
import io.javalin.Javalin;
import java.io.IOException;
import java.util.Queue;
import models.GameBoard;
import models.Message;
import models.Move;
import models.Player;
import org.eclipse.jetty.websocket.api.Session;

class PlayGame {

  private static final int PORT_NUMBER = 8080;

  private static Javalin app;

  /** Main method of the application.
   * @param args Command line arguments
   */
  public static void main(final String[] args) {

    app = Javalin.create(config -> {
      config.addStaticFiles("/public");
    }).start(PORT_NUMBER);

    // Test Echo Server
    app.post("/echo", ctx -> {
      ctx.result(ctx.body());
    });

    GameBoard gameBoard = new GameBoard();
    
    app.get("/newgame", ctx -> {
      gameBoard.startOver();
      ctx.redirect("/tictactoe.html");
    });
    
    app.post("/startgame", ctx -> {
      String type = ctx.formParam("type");
      if (type.equals("X")) {
        gameBoard.setPlayer1('X');
      } else {
        gameBoard.setPlayer1('O');
      }
      Gson gson = new Gson();
      ctx.result(gson.toJson(gameBoard));
    });
    
    app.get("/joingame", ctx -> {
      if (gameBoard.getPlayer1().getType() == 'X') {
        gameBoard.setPlayer2('O');
      } else {
        gameBoard.setPlayer2('X');
      }
      gameBoard.startGame();
      Gson gson = new Gson();
      sendGameBoardToAllPlayers(gson.toJson(gameBoard));
      ctx.redirect("/tictactoe.html?p=2");
    });
    
    app.post("/move/:playerId", ctx -> {
      int id = Integer.parseInt(ctx.pathParam("playerId"));
      int x = Integer.parseInt(ctx.formParam("x"));
      int y = Integer.parseInt(ctx.formParam("y"));
      Player player;
      if (id == 1) {
        player = gameBoard.getPlayer1();
      } else {
        player = gameBoard.getPlayer2();
      }
      Move move = new Move(player, x, y);
      boolean result = gameBoard.tryMove(move);
      Message msg;
      if (result) {
        msg = new Message(true, 100, "");
      } else {
        msg = new Message(false, 100, "Invalid move");
      }
      Gson gson = new Gson();
      ctx.result(gson.toJson(msg));
      sendGameBoardToAllPlayers(gson.toJson(gameBoard));
    });

    // Web sockets - DO NOT DELETE or CHANGE
    app.ws("/gameboard", new UiWebSocket());
  }

  /** Send message to all players.
   * @param gameBoardJson Gameboard JSON
   * @throws IOException Websocket message send IO Exception
   */
  private static void sendGameBoardToAllPlayers(final String gameBoardJson) {
    Queue<Session> sessions = UiWebSocket.getSessions();
    for (Session sessionPlayer : sessions) {
      try {
        sessionPlayer.getRemote().sendString(gameBoardJson);
      } catch (IOException e) {
        // Add logger here
        System.out.println("Error with sending to players.");
      }
    }
  }

  public static void stop() {
    app.stop();
  }
}
package controllers;

import io.javalin.websocket.WsCloseContext;
import io.javalin.websocket.WsCloseHandler;
import io.javalin.websocket.WsConnectContext;
import io.javalin.websocket.WsConnectHandler;
import io.javalin.websocket.WsHandler;
import java.util.Queue;
import java.util.concurrent.ConcurrentLinkedQueue;
import java.util.function.Consumer;
import org.eclipse.jetty.websocket.api.Session;

/** Web socket class: DO NOT MODIFY.
 * @author Shirish Singh
 *
 */
public class UiWebSocket implements Consumer<WsHandler>  {

  // Store sessions to broadcast a message to all users
  private static final Queue<Session> SESSIONS = new ConcurrentLinkedQueue<>();

  @Override
  public void accept(final WsHandler t) {

    // On Connect
    t.onConnect(new WsConnectHandler() {

      @Override
      public void handleConnect(final WsConnectContext ctx) throws Exception {
        // TODO Auto-generated method stub
        SESSIONS.add(ctx.session);
      }

    });

    // On Close
    t.onClose(new WsCloseHandler() {

      @Override
      public void handleClose(final WsCloseContext ctx) throws Exception {
        SESSIONS.remove(ctx.session);
      }
    });
  }

  public static Queue<Session> getSessions() {
    return SESSIONS;
  }

}
package models;

public class GameBoard {

  private Player p1;

  private Player p2;

  private boolean gameStarted;

  private int turn;

  private char[][] boardState;

  private int winner;

  private boolean isDraw;
  
  /**
   * Constructor.
   */
  public GameBoard() {
    this.p1 = null;
    this.p2 = null;
    this.gameStarted = false;
    this.turn = 0;
    this.boardState = new char[3][3];
    this.winner = 0;
    this.isDraw = false;
  }
  
  /**
   * To start a new game.
   */
  public void startOver() {
    this.p1 = null;
    this.p2 = null;
    this.gameStarted = false;
    this.turn = 0;
    this.boardState = new char[3][3];
    this.winner = 0;
    this.isDraw = false;
  }
  
  /**
   * Check if game is started.
   * @return if game is started.
   */
  public boolean isGameStarted() {
    return this.gameStarted; 
  }
  
  /**
   * Start initial game.
   */
  public void startGame() {
    this.gameStarted = true;
    this.turn = 1;
  }
 
  /**
   * Set player.
   * @param type player1 info.
   */
  public void setPlayer1(char type) {
    this.p1 = new Player(type, 1);
  }
  
  /**
   * Set player.
   * @param type player2 info.
   */
  public void setPlayer2(char type) {
    this.p2 = new Player(type, 2);
    this.gameStarted = true;
  }
  
  /**
   * Get player1.
   * @return player1 in the game.
   */
  public Player getPlayer1() {
    return this.p1;
  }
  
  /** Get player2.
   * @return player2 in this game.
   */
  public Player getPlayer2() {
    return this.p2;
  }
  
  /**
   * get the winner of the game.
   * @return winner 
   */
  public int getWinner() {
    return this.winner;
  }
  
  /**
   * get turn.
   * @return turn
   */
  public int getTurn() {
    return this.turn;
  }
  
  /**
   * get if the game is draw.
   * @return if is draw
   */
  public boolean getIsDraw() {
    return this.isDraw;
  }
  
  /**
   * Check which player it is according to the type char.
   * @param type The char type we want to check.
   * @return the id of the player.
   */
  public int checkTypePlayer(char type) {
    if (type == this.p1.getType()) {
      return 1;
    }
    return 2;
  }
  
  /**
   * Check if a player win based on the current board state.
   * 
   * @return whether one of the player win the game.
   */
  public boolean checkWin() {
    // check if have 3 consecutive in a column
    for (int i = 0; i < this.boardState.length; i++) { 
      char a = this.boardState[i][0];
      for (int j = 1; j < this.boardState[0].length; j++) {
        if (this.boardState[i][j] != a) {
          break;
        }
        if (j == boardState[0].length - 1 && a != 0) {
          this.winner = this.checkTypePlayer(a);
          return true;
        }
      }
    }
    
    // check if have 3 consecutive in a row
    for (int i = 0; i < this.boardState[0].length; i++) { 
      char a = this.boardState[0][i];
      for (int j = 1; j < this.boardState.length; j++) {
        if (this.boardState[j][i] != a) {
          break;
        }
        if (j == boardState[0].length - 1 && a != 0) {
          this.winner = this.checkTypePlayer(a);
          return true;
        }
      }
    }
    
    // check diagonal
    char b = this.boardState[0][0];
    for (int i = 1; i < this.boardState.length; i++) {
      if (b != this.boardState[i][i] || b == 0) {
        break;
      }
      if (i == boardState.length - 1) {
        this.winner = this.checkTypePlayer(b);
        return true;
      }
    }
      
    // check diagonal
    char c = this.boardState[0][this.boardState.length - 1];
    for (int i = 1; i < this.boardState.length; i++) {
      if (c != this.boardState[i][this.boardState.length - 1 - i] || c == 0) {
        break;
      }
      if (i == boardState.length - 1) {
        this.winner = this.checkTypePlayer(c);
        return true;
      }
    }
    
    // check if draw
    for (int i = 0; i < this.boardState.length; i++) { 
      for (int j = 1; j < this.boardState[0].length; j++) {
        if (this.boardState[i][j] == 0) {
          return false;
        }
      }
    }
    
    this.isDraw = true;
    
    return false;
  }
  
  /** Try if the move is valid, if so move.
   * @param move The move we want to try.
   * @return Whether the move is valid.
   */
  public boolean tryMove(Move move) {
    if (this.winner != 0 || this.isDraw == true) {
      return false;
    }
    int x = move.getX();
    int y = move.getY();
    Player player = move.getPlayer();
    
    if (this.turn != player.getId()) {
      return false;
    }
    
    if (this.boardState[x][y] == 0) {
      boardState[x][y] = player.getType();
    } else {
      return false;
    }  
    this.checkWin();
    
    if (this.turn == 1) {
      this.turn = 2;
    } else {
      this.turn = 1;
    }
    return true;
  }
}
package models;

public class Message {package models;

public class Move {

  private Player player;

  private int moveX;

  private int moveY;
  
  /**
   * Constructor.
   */
  public Move(Player player, int x, int y) {
    this.player = player;
    this.moveX = x;
    this.moveY = y;
  }
  
  /**
   * Get x coord. 
   * @return the x coord of the move
   */
  public int getX() {
    return this.moveX;
  }
  
  /**
   * Get y coord. 
   * @return the y coord of the move
   */
  public int getY() {
    return this.moveY;
  }
  
  /**
   * Get player. 
   * @return the Player of the move.
   */
  public Player getPlayer() {
    return this.player;
  }

}
package models;

public class Player {

  private char type;

  private int id;
  
  /**
   * Constructor.
   */
  public Player(char type, int id) {
    this.type = type;
    this.id = id;
  }
  
  /**
   * Get the type char of player.
   * @return the type (X or O) of the player
   */
  public char getType() {
    return this.type;
  }
  
  /**
   * Get id of player.
   * @return the id of the player.
   */
  public int getId() {
    return this.id;
  }

}


  private boolean moveValidity;

  private int code;

  private String message;
  
  /**
   * Constructor.
   */
  public Message(boolean y, int code, String msg) {
    this.moveValidity = y;
    this.code = code;
    this.message = msg;
  }

  /**
   * Getter.
   * @return move validity.
   */
  public boolean getValid() {
    return this.moveValidity;
  }
  
  /**
   * Getter.
   * @return code.
   */
  public int getCode() {
    return this.code;
  }
  
  /**
   * Getter.
   * @return message.
   */
  public String getMsg() {
    return this.message;
  }
}
