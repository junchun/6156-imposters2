package controllers;

import com.google.gson.Gson;
import io.javalin.Javalin;
import java.io.IOException;
import java.util.Queue;
import models.GameBoard;
import models.Message;
import org.eclipse.jetty.websocket.api.Session;



class PlayGame {

  private static final int PORT_NUMBER = 8080;

  private static Javalin app;

  

  /** Main method of the application.
   * @param args Command line arguments
   */
  public static void main(final String[] args) {
    
    app = Javalin.create(config -> {
      config.addStaticFiles("/public");
    }).start(PORT_NUMBER);

    // Test Echo Server
    app.post("/echo", ctx -> {
      ctx.result(ctx.body());
    });
    
    // Get the path to game.
    app.get("/newgame", ctx -> {
      ctx.result("http://" + ctx.host() + "/tictactoe.html");
    });
    
    GameBoard gameBoard = new GameBoard();
    
    
    //initialize the game board.
     
    
    app.post("/startgame", ctx -> {
      System.out.println(ctx.body());
      Gson gson = new Gson();
      gameBoard.setp1(ctx.body().charAt(ctx.body().length() - 1), 1);
      System.out.println(gson.toJson(gameBoard));
      sendGameBoardToAllPlayers(gson.toJson(gameBoard));
      
    });
    
    
    //set the board ready to play.
    
    
    app.get("/joingame", ctx -> {
      gameBoard.setp2(2);
      gameBoard.setGameStarted(true);
      gameBoard.setTurn(1);
      Gson gson = new Gson();
      ctx.result("http://" + ctx.host() + "/tictactoe.html?p=2");
      System.out.println(gson.toJson(gameBoard));
      sendGameBoardToAllPlayers(gson.toJson(gameBoard));
    });
    
    
    // set the board ready to play.
     
    
    app.post("/move/:playerId", ctx -> {
      System.out.println(Integer.parseInt(ctx.pathParam("playerId")));
      //System.out.println(ctx.body());
      System.out.println(ctx.body().split("&")[0].split("=")[1]
          + ctx.body().split("&")[1].split("=")[1]);
      int x = Integer.parseInt(ctx.body().split("&")[0].split("=")[1]);
      int y = Integer.parseInt(ctx.body().split("&")[1].split("=")[1]);
      Gson gson = new Gson();
      Message message = gameBoard.move(Integer.parseInt(ctx.pathParam("playerId")), x, y);
      if (message.isMoveValidity()) {
        sendGameBoardToAllPlayers(gson.toJson(gameBoard));
      }
      ctx.result(gson.toJson(message));
      if (message.getCode() != 100) {
        gameBoard.clearBoard();
      }
    });
    
    // Web sockets - DO NOT DELETE or CHANGE
    app.ws("/gameboard", new UiWebSocket());
  }

  /** Send message to all players.
   * @param gameBoardJson Gameboard JSON
   * @throws IOException Websocket message send IO Exception
   */
  private static void sendGameBoardToAllPlayers(final String gameBoardJson) {
    Queue<Session> sessions = UiWebSocket.getSessions();
    for (Session sessionPlayer : sessions) {
      try {
        sessionPlayer.getRemote().sendString(gameBoardJson);
      } catch (IOException e) {
        // Add logger here
      }
    }
  }

  public static void stop() {
    app.stop();
  }
}
package controllers;

import io.javalin.websocket.WsCloseContext;
import io.javalin.websocket.WsCloseHandler;
import io.javalin.websocket.WsConnectContext;
import io.javalin.websocket.WsConnectHandler;
import io.javalin.websocket.WsHandler;
import java.util.Queue;
import java.util.concurrent.ConcurrentLinkedQueue;
import java.util.function.Consumer;
import org.eclipse.jetty.websocket.api.Session;

/** Web socket class: DO NOT MODIFY.
 * @author Shirish Singh
 *
 */
public class UiWebSocket implements Consumer<WsHandler>  {

  // Store sessions to broadcast a message to all users
  private static final Queue<Session> SESSIONS = new ConcurrentLinkedQueue<>();

  @Override
  public void accept(final WsHandler t) {

    // On Connect
    t.onConnect(new WsConnectHandler() {

      @Override
      public void handleConnect(final WsConnectContext ctx) throws Exception {
        // TODO Auto-generated method stub
        SESSIONS.add(ctx.session);
      }

    });

    // On Close
    t.onClose(new WsCloseHandler() {

      @Override
      public void handleClose(final WsCloseContext ctx) throws Exception {
        SESSIONS.remove(ctx.session);
      }
    });
  }

  public static Queue<Session> getSessions() {
    return SESSIONS;
  }

}
package models;

public class GameBoard {

  private Player p1;

  private Player p2;

  private boolean gameStarted;

  private int turn;

  private char[][] boardState;

  private int winner;

  private boolean isDraw;
  
  /**
   * Initialize a Gameboard.
   *
   */

  public GameBoard() {
    super();
    //this.p2 = new Player();
    gameStarted = false;
    turn = 0;
    initializeBoard();
    winner = 0;
    isDraw = false;
  }
  
  public void setp1(char type, int id) {
    p1 = new Player(type, id);
  }
  
  /**
   * p2 can't choose type.
   *
   */
  
  public void setp2(int id) {
    if (p1.getType() == 'X') {
      p2 = new Player('O', id);
    } else {
      p2 = new Player('X', id);
    }
  }
  
  private void initializeBoard() {
    this.boardState = new char[3][3];
    for (int i = 0; i < 3; i++) {
      for (int j = 0; j < 3; j++) {
        this.boardState[i][j] = 0;
      }
    }

  }

  public boolean isGameStarted() {
    return gameStarted;
  }

  public void setGameStarted(boolean gameStarted) {
    this.gameStarted = gameStarted;
  }

  public int getTurn() {
    return turn;
  }

  public void setTurn(int turn) {
    this.turn = turn;
  }

  public int getWinner() {
    return winner;
  }

  public void setWinner(int winner) {
    this.winner = winner;
  }

  public boolean isDraw() {
    return isDraw;
  }

  public void setDraw(boolean isDraw) {
    this.isDraw = isDraw;
  }

  public Player getP1() {
    return p1;
  }

  public Player getP2() {
    return p2;
  }

  public char[][] getBoardState() {
    return boardState;
  }
  
  /**
   *enumerate all the possible condition of winning.
   */
  
  private boolean checkWin() {
    if ((boardState[0][0] == boardState[0][1]) && (boardState[0][1] == boardState[0][2])
         && (boardState[0][0] != 0)
         || (boardState[1][0] == boardState[1][1]) && (boardState[1][1] == boardState[1][2])
         && (boardState[1][0] != 0)
         || (boardState[2][0] == boardState[2][1]) && (boardState[2][1] == boardState[2][2])
         && (boardState[2][0] != 0)
         || (boardState[0][0] == boardState[1][0]) && (boardState[1][0] == boardState[2][0])
         && (boardState[0][0] != 0)
         || (boardState[0][1] == boardState[1][1]) && (boardState[1][1] == boardState[2][1])
         && (boardState[0][1] != 0)
         || (boardState[0][2] == boardState[1][2]) && (boardState[1][2] == boardState[2][2])
         && (boardState[0][2] != 0)
         || (boardState[0][0] == boardState[1][1]) && (boardState[1][1] == boardState[2][2])
         && (boardState[0][0] != 0)
         || (boardState[0][2] == boardState[1][1]) && (boardState[1][1] == boardState[2][0])
         && (boardState[0][2] != 0)) {
      return true;
    } else {
      return false; 
    }
  } 
  
  private boolean checkDraw() {
    for (int i = 0; i < 3; i++) {
      for (int j = 0; j < 3; j++) {
        if (boardState[i][j] == 0) {
          return false;
        }
      }
    }
    return true;
  }
  
  /**
   * public method to make a move.
   * 
   * @param id player id
   * @param x x coordinate
   * @param y y coordinate
   * @return the message
   */

  public Message move(int id, int x, int y) {
    Message message = new Message();
    if (!gameStarted) {
      message.setMoveValidity(false);
      message.setMessage("Game not started");
    } else if (id != turn) {
      message.setMoveValidity(false);
      message.setMessage("Not your turn");
    } else if (boardState[x][y] != 0) {
      message.setMoveValidity(false);
      message.setMessage("This square is already taken");
    } else {
      boardState[x][y] = id == 1 ? p1.getType() : p2.getType();
      turn = 3 - turn;
      if (checkWin()) {
        winner = id;
        message.setMoveValidity(true);
        message.setMessage("you win!");  
        message.setCode(200);
      } else if (checkDraw()) {
        isDraw = true;
        message.setMoveValidity(true);
        message.setMessage("Draw");
        message.setCode(300);
      } else {
        message.setMoveValidity(true);
        message.setCode(100);
      }
    }
    return message;
  }
  
  /**
   * clear the Class.
   */
  
  public void clearBoard() {
    gameStarted = false;
    turn = 0;
    initializeBoard();
    winner = 0;
    isDraw = false;
    p1 = null;
    p2 = null;
  }


}
package models;

public class Message {

  private boolean moveValidity;

  private int code;

  private String message;

  public boolean isMoveValidity() {
    return moveValidity;
  }

  public void setMoveValidity(boolean moveValidity) {
    this.moveValidity = moveValidity;
  }

  public int getCode() {
    return code;
  }

  public void setCode(int code) {
    this.code = code;
  }

  public String getMessage() {
    return message;
  }

  public void setMessage(String message) {
    this.message = message;
  }

}
package models;

public class Move {

  private Player player;

  private int moveX;

  private int moveY;

  public Player getPlayer() {
    return player;
  }

  public void setPlayer(Player player) {
    this.player = player;
  }

  public int getMoveX() {
    return moveX;
  }

  public void setMoveX(int moveX) {
    this.moveX = moveX;
  }

  public int getMoveY() {
    return moveY;
  }

  public void setMoveY(int moveY) {
    this.moveY = moveY;
  }

}
package models;

public class Player {

  private char type;

  private int id;

  public char getType() {
    return type;
  }

  public void setType(char type) {
    this.type = type;
  }

  public int getId() {
    return id;
  }

  public void setId(int id) {
    this.id = id;
  }

  /**
   * Initialize a player with type and id.
   * 
   * @param type Player's piece's type
   * @param id Player's id
   */
  public Player(char type, int id) {
    super();
    this.type = type;
    this.id = id;
  }

}
