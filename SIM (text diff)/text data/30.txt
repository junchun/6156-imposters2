package controllers;


import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import io.javalin.Javalin;
import java.io.IOException;
import java.lang.Object;
import java.util.Queue;
import models.GameBoard;
import models.Message;
import models.Move;
import models.Player;
import org.eclipse.jetty.websocket.api.Session;


class PlayGame {

  private static final int PORT_NUMBER = 8080;

  private static Javalin app;

  /** Main method of the application.
   * @param args Command line arguments
   */
  public static void main(final String[] args) {
    
    GameBoard gameBoard = new GameBoard();

    app = Javalin.create(config -> {
      config.addStaticFiles("/public");
    }).start(PORT_NUMBER);

    // Test Echo Server
    app.post("/echo", ctx -> {
      ctx.result(ctx.body());
    });
   
    // Endpoint startgame
    app.post("/startgame", ctx -> {
      String type = ctx.body();
      char type1 = type.charAt(type.length() - 1); // Get 'X' or 'O' from "type=?"
      System.out.println(type1);
      Player p1 = new Player(type1, 1);
      gameBoard.setP1(p1);
      System.out.println(new Gson().toJson(gameBoard)); // Convert models to JSON objects
      ctx.result(new Gson().toJson(gameBoard));
      
    });
    
    // Endpoint joingame
    app.get("/joingame", ctx -> {
      ctx.redirect("/tictactoe.html?p=2");
      char type2 = gameBoard.getP1().getType() == 'X' ? 'O' : 'X'; // If p1 'X', p2 'O'; vise versa
      Player p2 = new Player(type2, 2);
      gameBoard.setP2(p2);
      gameBoard.setGameStarted(true);
      sendGameBoardToAllPlayers(new Gson().toJson(gameBoard));
      System.out.println(new Gson().toJson(gameBoard));
    });
    
    // Endpoint newgame
    app.get("/newgame", ctx -> {
      gameBoard.setNewGame(); // clear gameBoard, ready to start again
      ctx.redirect("tictactoe.html");
    });
    
    // Endpoint move
    app.post("/move/:playerId", ctx -> {
      
      Message message = new Message();
      
      // First check if the player get its turn
      if (gameBoard.getTurn() == Character.getNumericValue(ctx.pathParam("playerId").charAt(0))) {
        String move = ctx.body();
        int moveX = move.charAt(2) - '0'; // Get moveX from "x=0&y=0"
        int moveY = move.charAt(move.length() - 1) - '0'; // Get moveY from "x=0&y=0"
        Move playerMove = new Move(moveX, moveY);
        if (gameBoard.getTurn() == 1) { //PLayer 1 moves
          playerMove.setplayer(gameBoard.getP1());
        } else if (gameBoard.getTurn() == 2) { //PLayer 2 moves
          playerMove.setplayer(gameBoard.getP2());
        }
        if (message.checkMoveValidity(gameBoard, playerMove)) { // Check if move is valid
          gameBoard.setBoardState(playerMove);
          sendGameBoardToAllPlayers(new Gson().toJson(gameBoard)); 
        }
      }
    });

    // Web sockets - DO NOT DELETE or CHANGE
    app.ws("/gameboard", new UiWebSocket());
  }

  /** Send message to all players.
   * @param gameBoardJson Gameboard JSON
   * @throws IOException Websocket message send IO Exception
   */
  private static void sendGameBoardToAllPlayers(final String gameBoardJson) {
    Queue<Session> sessions = UiWebSocket.getSessions();
    for (Session sessionPlayer : sessions) {
      try {
        sessionPlayer.getRemote().sendString(gameBoardJson);
      } catch (IOException e) {
        // Add logger here
      }
    }
  }

  public static void stop() {
    app.stop();
  }
}

package controllers;

import io.javalin.websocket.WsCloseContext;
import io.javalin.websocket.WsCloseHandler;
import io.javalin.websocket.WsConnectContext;
import io.javalin.websocket.WsConnectHandler;
import io.javalin.websocket.WsHandler;
import java.util.Queue;
import java.util.concurrent.ConcurrentLinkedQueue;
import java.util.function.Consumer;
import org.eclipse.jetty.websocket.api.Session;

/** Web socket class: DO NOT MODIFY.
 * @author Shirish Singh
 *
 */
public class UiWebSocket implements Consumer<WsHandler>  {

  // Store sessions to broadcast a message to all users
  private static final Queue<Session> SESSIONS = new ConcurrentLinkedQueue<>();

  @Override
  public void accept(final WsHandler t) {

    // On Connect
    t.onConnect(new WsConnectHandler() {

      @Override
      public void handleConnect(final WsConnectContext ctx) throws Exception {
        // TODO Auto-generated method stub
        SESSIONS.add(ctx.session);
      }

    });

    // On Close
    t.onClose(new WsCloseHandler() {

      @Override
      public void handleClose(final WsCloseContext ctx) throws Exception {
        SESSIONS.remove(ctx.session);
      }
    });
  }

  public static Queue<Session> getSessions() {
    return SESSIONS;
  }

}

package models;

public class GameBoard {

  private Player p1;

  private Player p2;

  private boolean gameStarted;

  private int turn;

  private char[][] boardState;

  private int winner;

  private boolean isDraw;
  
  
  /**
   * GameBoard class of the model. 
   * boardState is a char 2D array recording 'X' and 'O'
   * winner, isDraw, gameStarted are boolean reflecting game status
   * turn is would be 1 or 2
   */
  
  public GameBoard() {
    gameStarted = false;
    turn = 1;
    this.boardState = new char[3][3];
    winner = 0;
    isDraw = false;
    
  }
  
  public void setP1(Player p1) {
    this.p1 = p1;
  }
  
  public Player getP1() {
    return p1;
  }
  
  public void setP2(Player p2) {
    this.p2 = p2;
  }
  
  public Player getP2() {
    return p2;
  }
  
  public void setGameStarted(boolean gameStarted) {
    this.gameStarted = gameStarted;
  }
  
  public boolean getGameStarted() {
    return gameStarted;
  }
  
  /**
   * Set 'X' or 'O' to the 3x3 board.
   * Check if the game ends 
   * Switch turn
   */
  public void setBoardState(Move move) {
    Message message = new Message();
    boardState[move.getMoveX()][move.getMoveY()] = move.getplayer().getType();
    if (message.checkWin(this, move)) {
      winner = this.turn;
      return;
    }
    if (message.checkDraw(this)) {
      isDraw = true;
      return;
    }
    turn = (move.getplayer().getId() == 1) ? 2 : 1;
  }
  
  public char[][] getBoardState() {
    return boardState;
  }
  
  /** 
   * Call this when newGame.
   * Clear the board, ready to serve a new game.
   */
  
  public void setNewGame() {
    gameStarted = false;
    turn = 1;
    for (int i = 0; i < 3; ++i) {
      for (int j = 0; j < 3; ++j) {
        boardState[i][j] = 0;
      }
    }
    winner = 0;
    isDraw = false;
  }
  
  public void setTurn(Player player) {
    turn = player.getId();
  }
  
  public int getTurn() {
    return turn;
  }
  
}


package models;

public class Message {

  private boolean moveValidity;

  private int code;

  private String message;

  
  /** 
   * This is message class.
   * moveValidity is boolean, checks if move is valid
   * code and message are for error handling
   */
  
  public Message() {
    this.moveValidity = false;
    this.code = 0;
    this.message = "I am a message!";
  }  
  
  /** 
   * This function checks MoveValidity.
   */
  
  public boolean checkMoveValidity(GameBoard gameBoard, Move move) {
    if (gameBoard.getBoardState()[move.getMoveX()][move.getMoveY()] == 0) {
      return true;
    } else {
      moveValidity = false;
      code = -100;
      message = "Not Valid!";
      return false;
    }
  }
  
  /** 
   * This function checks if Draw.
   */
  
  public boolean checkDraw(GameBoard gameBoard) {
    for (int i = 0; i < 3; i++) {
      for (int j = 0; j < 3; j++) {
        if (gameBoard.getBoardState()[i][j] == 0) {
          code = 11;
          message = "Draw!";
          return false;
        }
      }
    }
    return true;
  }
  
  /** 
   * This function checks if someone wins.
   * There are eight possible patterns to win this game  
   */ 
  
  public boolean checkWin(GameBoard gameBoard, Move move) {
    char type = move.getplayer().getType();
    if (gameBoard.getBoardState()[0][0] == type 
        && gameBoard.getBoardState()[0][1] == type 
        && gameBoard.getBoardState()[0][2] == type) {
      code = 1000;
      message = "End Game, some wins.";
      return true;
    }
    if (gameBoard.getBoardState()[1][0] == type 
        && gameBoard.getBoardState()[1][1] == type 
        && gameBoard.getBoardState()[1][2] == type) {
      code = 1000;
      message = "End Game, some wins.";
      return true;
    }

    if (gameBoard.getBoardState()[2][0] == type 
        && gameBoard.getBoardState()[2][1] == type 
        && gameBoard.getBoardState()[2][2] == type) {
      code = 1000;
      message = "End Game, some wins.";
      return true;
    }
    
    if (gameBoard.getBoardState()[0][0] == type 
        && gameBoard.getBoardState()[1][0] == type 
        && gameBoard.getBoardState()[2][0] == type) {
      code = 1000;
      message = "End Game, some wins.";
      return true;
    }
  
    if (gameBoard.getBoardState()[0][1] == type 
        && gameBoard.getBoardState()[1][1] == type 
        && gameBoard.getBoardState()[2][1] == type) {
      code = 1000;
      message = "End Game, some wins.";
      return true;
    
    }
    if (gameBoard.getBoardState()[0][2] == type 
        && gameBoard.getBoardState()[1][2] == type 
        && gameBoard.getBoardState()[2][2] == type) {
      code = 1000;
      message = "End Game, some wins.";
      return true;
    }
    if (gameBoard.getBoardState()[0][0] == type 
        && gameBoard.getBoardState()[1][1] == type 
        && gameBoard.getBoardState()[2][2] == type) {
      code = 1000;
      message = "End Game, some wins.";
      return true;
    }
    if (gameBoard.getBoardState()[2][0] == type 
        && gameBoard.getBoardState()[1][1] == type 
        && gameBoard.getBoardState()[0][2] == type) {
      code = 1000;
      message = "End Game, some wins.";
      return true;
    }
    return false;
    
  }

}
package models;

public class Move {

  private Player player;
  
  private int moveX;
  
  private int moveY;
  
  /** 
   * This is Move class.
   * moveX and moveY represents the move
   * player is the one who moves
   */
  
  public Move(int moveX, int moveY) {
    this.player = new Player();
    this.moveX = moveX;
    this.moveY = moveY;
  }
  
  public void setMoveX(int moveX) {
    this.moveX = moveX;
  }
  
  public int getMoveX() {
    return moveX;
  }
  
  public void setMoveY(int moveY) {
    this.moveY = moveY;
  }
  
  public int getMoveY() {
    return moveY;
  }
 
  public void setplayer(Player player) {
    this.player = player;
  }
  
  public Player getplayer() {
    return player;
  }
  
}
package models;

public class Player {

  private char type;

  private int id;
  
  /*
   * This is Player class.
   * id is 1 or 2
   * type is 'X' or 'O'
   */
  
  // default constructor
  public Player() {
    type = 'O';
    id = 1;
  }
  
  //common constructor
  public Player(char type, int id) {
    this.type = type;
    this.id = id;
  }
  
  public void setPlayer(char type, int id) {
    this.type = type;
    this.id = id;
  }
  
  public void setType(char type) {
    this.type = type;
  }
  
  public char getType() {
    return type;
  }
  
  public void setId(int id) {
    this.id = id;
  }
  
  public int getId() {
    return id;
  }
 
}