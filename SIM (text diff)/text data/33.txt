package controllers;

import com.google.gson.Gson;
import io.javalin.Javalin;
import java.io.IOException;
import java.util.Queue;
import models.GameBoard;
import models.GameBoard.Result;
import models.Message;
import org.eclipse.jetty.websocket.api.Session;

final class PlayGame {

  private PlayGame() {
    //not called
  }

  /** port number. */
  private static final int PORT_NUMBER = 8080;
  /** the Javalin application. */
  private static Javalin app;
  /** the current GameBoard object. */
  private static GameBoard gb = null;
  /** Gson Object used to transfer Object to Json String. */
  private static Gson gson = new Gson();
  /** the error messages. */
  private static String[] messages = {
    "",
    "This position has been taken",
    "It's not your turn",
    "Your opponent hasn't joined",
    "Game is ended"
  };
  /** the type information's index in message. */
  private static final int TYPE_INDEX_IN_MESSAGE = 5;
  /** the default status message code. */
  private static final int DEFAULT_MESSAGE_CODE = 100;

  /** Main method of the application.
   * @param args Command line arguments
   */
  public static void main(final String[] args) {

    app = Javalin.create(config -> {
      config.addStaticFiles("/public");
    }).start(PORT_NUMBER);

    // Test Echo Server
    app.post("/echo", ctx -> {
      ctx.result(ctx.body());
    });

    // newGame
    app.get("/newgame", ctx -> {
      ctx.redirect("/tictactoe.html");
    });

    // startGame
    app.post("/startgame", ctx -> {
      char choice = ctx.body().charAt(TYPE_INDEX_IN_MESSAGE);
      gb = new GameBoard(choice);
      
      ctx.result(gson.toJson(gb));
    });

    // joinGame
    app.get("/joingame", ctx -> {
      if (gb == null) {
        ctx.result("Link is invalid");
        return;
      }
      gb.setGameStarted(true);
      ctx.redirect("/tictactoe.html?p=2");
      sendGameBoardToAllPlayers(gson.toJson(gb));
    });

    // move
    app.post("/move/:playerId", ctx -> {
      String playerId = ctx.pathParam("playerId");
      char c;

      if (playerId.equals("1")) {
        c = gb.getP1().getType();
      } else {
        c = gb.getP2().getType();
      }
      int x = Integer.parseInt(ctx.formParam("x"));
      int y = Integer.parseInt(ctx.formParam("y"));
      Result res = gb.update(x, y, c);
      Message m = new Message(res == Result.VALID, DEFAULT_MESSAGE_CODE,
          messages[res.ordinal()]);
      ctx.result(gson.toJson(m));
      sendGameBoardToAllPlayers(gson.toJson(gb));
    });

    // Web sockets - DO NOT DELETE or CHANGE
    app.ws("/gameboard", new UiWebSocket());
  }

  /** Send message to all players.
   * @param gameBoardJson Gameboard JSON
   * @throws IOException Websocket message send IO Exception
   */
  private static void sendGameBoardToAllPlayers(final String gameBoardJson) {
    Queue<Session> sessions = UiWebSocket.getSessions();
    for (Session sessionPlayer : sessions) {
      try {
        sessionPlayer.getRemote().sendString(gameBoardJson);
      } catch (IOException e) {
        // Add logger here
      }
    }
  }

  public static void stop() {
    app.stop();
  }
}
package controllers;

import io.javalin.websocket.WsCloseContext;
import io.javalin.websocket.WsCloseHandler;
import io.javalin.websocket.WsConnectContext;
import io.javalin.websocket.WsConnectHandler;
import io.javalin.websocket.WsHandler;
import java.util.Queue;
import java.util.concurrent.ConcurrentLinkedQueue;
import java.util.function.Consumer;
import org.eclipse.jetty.websocket.api.Session;

/** Web socket class: DO NOT MODIFY.
 * @author Shirish Singh
 *
 */
public class UiWebSocket implements Consumer<WsHandler>  {

  /** Store sessions to broadcast a message to all users. */
  private static final Queue<Session> SESSIONS = new ConcurrentLinkedQueue<>();

  /** some explination. */
  @Override
  public void accept(final WsHandler t) {

    // On Connect
    t.onConnect(new WsConnectHandler() {

      @Override
      public void handleConnect(final WsConnectContext ctx) throws Exception {
        // TODO Auto-generated method stub
        SESSIONS.add(ctx.session);
      }

    });

    // On Close
    t.onClose(new WsCloseHandler() {

      @Override
      public void handleClose(final WsCloseContext ctx) throws Exception {
        SESSIONS.remove(ctx.session);
      }
    });
  }

  /** some explination.
   *  @return blabla
   */
  public static Queue<Session> getSessions() {
    return SESSIONS;
  }

}
package models;

public class GameBoard {

  /** TicTacToe's board length. */
  private final int boardSideLength = 3;
  /** TicTacToe's board's total position count. */
  private final int posCount = 9;

  /** The possible result for each user's step. */
  public enum Result {
    /** The step is valid. */
    VALID,
    /** Invalid, the selected position is been taken. */
    POSITION_BE_TAKEN,
    /** Invalid, it is not current user's turn. */
    NOT_YOUR_TURN,
    /** Invalid, the game is not started yet. */
    NOT_STARTED,
    /** Invalid, the game is ended. */
    GAME_ENDED
  }

  /** Record the player1's option. */
  private Player p1;

  /** Record the player2's option. */
  private Player p2;

  /** Indicate if the game started. */
  private boolean gameStarted;

  /** Indicate who's turn now. */
  private int turn;

  /** Keep track of the board state. */
  private char[][] boardState;

  /** Indicate if winner is generated and who. */
  private int winner;

  /** Indicate if the game is draw. */
  private boolean isDraw;

  /** Indicate how many blank position are there in the board. */
  private int left;

  /** Constructor for GameBoard.
   * @param choice the user's chosen character
   */
  public GameBoard(final char choice) {
    p1 = new Player(choice, 1);
    if (choice == 'X') {
      p2 = new Player('O', 2);
    } else {
      p2 = new Player('X', 2);
    }
    gameStarted = false;
    turn = 1;
    boardState = new char[boardSideLength][boardSideLength];
    for (int i = 0; i < boardSideLength; i++) {
      for (int j = 0; j < boardSideLength; j++) {
        boardState[i][j] = '\u0000';
      }
    }
    winner = 0;
    isDraw = false;
    left = posCount;
  }

  /** Update the board, the return value has different meaning.
   * @param x index x
   * @param y index y
   * @param c the character the user use
   * @return status code
   */
  public Result update(final int x, final int y, final char c) {
    if (winner > 0 || isDraw) {
      return Result.GAME_ENDED;
    }
    if (boardState[x][y] != '\u0000') {
      return Result.POSITION_BE_TAKEN;
    }
    if (!gameStarted) {
      return Result.NOT_STARTED;
    }

    Player p;
    if (c == p1.getType()) {
      p = p1;
    } else {
      p = p2;
    }
    if ((c == p1.getType() && turn == 2) || (c == p2.getType() && turn == 1)) {
      return Result.NOT_YOUR_TURN;
    }

    boardState[x][y] = c;
    left--;
    if (turn == 1) {
      turn = 2;
    } else {
      turn = 1;
    }
    int i;
    for (i = 0; i < boardSideLength; i++) {
      if (boardState[i][y] != c) {
        break;
      }
    }
    if (i == boardSideLength) {
      winner = p.getId();
      return Result.VALID;
    }
    for (i = 0; i < boardSideLength; i++) {
      if (boardState[x][i] != c) {
        break;
      }
    }
    if (i == boardSideLength) {
      winner = p.getId();
      return Result.VALID;
    }
    if (boardState[0][0] == boardState[1][1]
        && boardState[1][1] == boardState[2][2]
        && boardState[0][0] == c) {
      winner = p.getId();
      return Result.VALID;
    }
    if (boardState[2][0] == boardState[1][1]
        && boardState[1][1] == boardState[0][2]
        && boardState[1][1] == c) {
      winner = p.getId();
      return Result.VALID;
    }

    if (left == 0) {
      isDraw = true;
      return Result.VALID;
    }
    return Result.VALID;
  }

  /** Make sure the variable can be serialized.
   *  @return p1
   */
  public Player getP1() {
    return p1;
  }

  /** Make sure the variable can be serialized.
   *  @param player1 p1
   */
  public void setP1(final Player player1) {
    this.p1 = player1;
  }

  /** Make sure the variable can be serialized.
   *  @return p2
   */
  public Player getP2() {
    return p2;
  }

  /** Make sure the variable can be serialized.
   *  @param player2 p2
   */
  public void setP2(final Player player2) {
    this.p2 = player2;
  }

  /** Make sure the variable can be serialized.
   *  @return gameStarted
   */
  public boolean isGameStarted() {
    return gameStarted;
  }

  /** Make sure the variable can be serialized.
   * @param ifGameStarted gameStarted
   */
  public void setGameStarted(final boolean ifGameStarted) {
    this.gameStarted = ifGameStarted;
  }

  /** Make sure the variable can be serialized.
   *  @return turn
   */
  public int getTurn() {
    return turn;
  }

  /** Make sure the variable can be serialized.
   *  @param val turn
   */
  public void setTurn(final int val) {
    this.turn = val;
  }

  /** Make sure the variable can be serialized.
   *  @return boardState
   */
  public char[][] getBoardState() {
    return boardState;
  }

  /** Make sure the variable can be serialized.
   *  @param newBoardState boardState
   */
  public void setBoardState(final char[][] newBoardState) {
    this.boardState = newBoardState;
  }

  /** Make sure the variable can be serialized.
   * @return winner
   */
  public int getWinner() {
    return winner;
  }

  /** Make sure the variable can be serialized.
   *  @param whoIsWinner winner
   */
  public void setWinner(final int whoIsWinner) {
    this.winner = whoIsWinner;
  }

  /** Make sure the variable can be serialized.
   *  @return isDraw
   */
  public boolean getIsDraw() {
    return isDraw;
  }

  /** Make sure the variable can be serialized.
   *  @param isDrawHappened isDraw
   */
  public void setIsDraw(final boolean isDrawHappened) {
    this.isDraw = isDrawHappened;
  }

}
package models;

public class Message {

  /** Indicate if the current move is valid. */
  private boolean moveValidity;

  /** The status code of the current move. */
  private int code;

  /** The message to show of this move. */
  private String message;

  /** Constructor for Message.
   * @param ifValid if the move is validated
   * @param statusCode the status code
   * @param messageToShow the error notification to show
   */
  public Message(final boolean ifValid, final int statusCode,
      final String messageToShow) {
    this.moveValidity = ifValid;
    this.code = statusCode;
    this.message = messageToShow;
  }

  /** Make sure the variable can be serialized.
   *  @return moveValidity
   */
  public boolean isMoveValidity() {
    return moveValidity;
  }

  /** Make sure the variable can be serialized.
   *  @param ifValid moveValidity
   */
  public void setMoveValidity(final boolean ifValid) {
    this.moveValidity = ifValid;
  }

  /** Make sure the variable can be serialized.
   *  @return code
   */
  public int getCode() {
    return code;
  }

  /** Make sure the variable can be serialized.
   *  @param statusCode code
   */
  public void setCode(final int statusCode) {
    this.code = statusCode;
  }

  /** Make sure the variable can be serialized.
   *  @return message
   */
  public String getMessage() {
    return message;
  }

  /** Make sure the variable can be serialized.
   *  @param messageToShow message
   */
  public void setMessage(final String messageToShow) {
    this.message = messageToShow;
  }

}
package models;

public class Player {

  /** Store the user's choice. */
  private char type;

  /** Store the user's id. */
  private int id;

  /** Constructor for Player.
   * @param userType user's choice 'X' or 'O'
   * @param userId the user's id
   */
  public Player(final char userType, final int userId) {
    this.type = userType;
    this.id = userId;
  }

  /** Make sure the variable can be serialized.
   *  @return type
   */
  public char getType() {
    return type;
  }

  /** Make sure the variable can be serialized.
   *  @param userType type
   */
  public void setType(final char userType) {
    this.type = userType;
  }

  /** Make sure the variable can be serialized.
   *  @return id
   */
  public int getId() {
    return id;
  }

  /** Make sure the variable can be serialized.
   *  @param userId id
   */
  public void setId(final int userId) {
    this.id = userId;
  }

}
